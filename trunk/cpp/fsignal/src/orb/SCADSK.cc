// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "SCAD.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_2;



void
org::cfn::scad::core::corba::hardware::Event::operator>>= (cdrStream &_n) const
{
  event_unique_id >>= _n;
  _n.marshalWString(nameUniqueID,0);
  (const util::TimeStamp&) tstamp >>= _n;

}

void
org::cfn::scad::core::corba::hardware::Event::operator<<= (cdrStream &_n)
{
  (CORBA::LongLong&)event_unique_id <<= _n;
  nameUniqueID = _n.unmarshalWString(0);
  (util::TimeStamp&)tstamp <<= _n;

}

void
org::cfn::scad::core::corba::hardware::NameInfo::operator>>= (cdrStream &_n) const
{
  _n.marshalWString(nodeUID,0);
  _n.marshalWString(hwUID,0);
  _n.marshalWString(parUID,0);
  _n.marshalWString(name,0);
  _n.marshalWString(description,0);

}

void
org::cfn::scad::core::corba::hardware::NameInfo::operator<<= (cdrStream &_n)
{
  nodeUID = _n.unmarshalWString(0);
  hwUID = _n.unmarshalWString(0);
  parUID = _n.unmarshalWString(0);
  name = _n.unmarshalWString(0);
  description = _n.unmarshalWString(0);

}

void
org::cfn::scad::core::corba::db::Data::operator>>= (cdrStream &_n) const
{
  (const util::TimeStamp&) tstart >>= _n;
  (const util::TimeStamp&) tend >>= _n;
  (const hardware::EventList&) eList >>= _n;
  _n.marshalWString(configXML,0);
  (const util::ByteArray&) datab >>= _n;

}

void
org::cfn::scad::core::corba::db::Data::operator<<= (cdrStream &_n)
{
  (util::TimeStamp&)tstart <<= _n;
  (util::TimeStamp&)tend <<= _n;
  (hardware::EventList&)eList <<= _n;
  configXML = _n.unmarshalWString(0);
  (util::ByteArray&)datab <<= _n;

}

org::cfn::scad::core::corba::db::Database_ptr org::cfn::scad::core::corba::db::Database_Helper::_nil() {
  return ::org::cfn::scad::core::corba::db::Database::_nil();
}

CORBA::Boolean org::cfn::scad::core::corba::db::Database_Helper::is_nil(::org::cfn::scad::core::corba::db::Database_ptr p) {
  return CORBA::is_nil(p);

}

void org::cfn::scad::core::corba::db::Database_Helper::release(::org::cfn::scad::core::corba::db::Database_ptr p) {
  CORBA::release(p);
}

void org::cfn::scad::core::corba::db::Database_Helper::marshalObjRef(::org::cfn::scad::core::corba::db::Database_ptr obj, cdrStream& s) {
  ::org::cfn::scad::core::corba::db::Database::_marshalObjRef(obj, s);
}

org::cfn::scad::core::corba::db::Database_ptr org::cfn::scad::core::corba::db::Database_Helper::unmarshalObjRef(cdrStream& s) {
  return ::org::cfn::scad::core::corba::db::Database::_unmarshalObjRef(s);
}

void org::cfn::scad::core::corba::db::Database_Helper::duplicate(::org::cfn::scad::core::corba::db::Database_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

org::cfn::scad::core::corba::db::Database_ptr
org::cfn::scad::core::corba::db::Database::_duplicate(::org::cfn::scad::core::corba::db::Database_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

org::cfn::scad::core::corba::db::Database_ptr
org::cfn::scad::core::corba::db::Database::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


org::cfn::scad::core::corba::db::Database_ptr
org::cfn::scad::core::corba::db::Database::_unchecked_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

org::cfn::scad::core::corba::db::Database_ptr
org::cfn::scad::core::corba::db::Database::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Database _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Database* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Database;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* org::cfn::scad::core::corba::db::Database::_PD_repoId = "IDL:org/cfn/scad/core/corba/db/Database:1.0";


org::cfn::scad::core::corba::db::_objref_Database::~_objref_Database() {

}


org::cfn::scad::core::corba::db::_objref_Database::_objref_Database(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::org::cfn::scad::core::corba::db::Database::_PD_repoId, ior, id, 1)


{
  _PR_setobj(this);
}

void*
org::cfn::scad::core::corba::db::_objref_Database::_ptrToObjRef(const char* id)
{
  if( id == ::org::cfn::scad::core::corba::db::Database::_PD_repoId )
    return (::org::cfn::scad::core::corba::db::Database_ptr) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::org::cfn::scad::core::corba::db::Database::_PD_repoId) )
    return (::org::cfn::scad::core::corba::db::Database_ptr) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring_i_cwstring_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mdb_mData
class _0RL_cd_FF8C1277964B9560_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  org::cfn::scad::core::corba::db::Data_var arg_3_;
  const org::cfn::scad::core::corba::db::Data* arg_3;
};

void _0RL_cd_FF8C1277964B9560_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);
  (const org::cfn::scad::core::corba::db::Data&) *arg_3 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();
  arg_3_ = new org::cfn::scad::core::corba::db::Data;
  (org::cfn::scad::core::corba::db::Data&)arg_3_ <<= _n;
  arg_3 = &arg_3_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_00000000* tcd = (_0RL_cd_FF8C1277964B9560_00000000*)cd;
  org::cfn::scad::core::corba::db::_impl_Database* impl = (org::cfn::scad::core::corba::db::_impl_Database*) svnt->_ptrToInterface(org::cfn::scad::core::corba::db::Database::_PD_repoId);
  impl->putData(tcd->arg_0, tcd->arg_1, tcd->arg_2, *tcd->arg_3);


}

void org::cfn::scad::core::corba::db::_objref_Database::putData(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, const Data& dt)
{
  _0RL_cd_FF8C1277964B9560_00000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_10000000, "putData", 8);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = parameterUniqueID;
  _call_desc.arg_3 = &(Data&) dt;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring_i_cwstring_i_cwstring
class _0RL_cd_FF8C1277964B9560_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
};

void _0RL_cd_FF8C1277964B9560_20000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);

}

void _0RL_cd_FF8C1277964B9560_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_20000000* tcd = (_0RL_cd_FF8C1277964B9560_20000000*)cd;
  org::cfn::scad::core::corba::db::_impl_Database* impl = (org::cfn::scad::core::corba::db::_impl_Database*) svnt->_ptrToInterface(org::cfn::scad::core::corba::db::Database::_PD_repoId);
  impl->addHardware(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void org::cfn::scad::core::corba::db::_objref_Database::addHardware(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* hardwareXML)
{
  _0RL_cd_FF8C1277964B9560_20000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_30000000, "addHardware", 12);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = hardwareXML;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring_i_cwstring
class _0RL_cd_FF8C1277964B9560_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
};

void _0RL_cd_FF8C1277964B9560_40000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);

}

void _0RL_cd_FF8C1277964B9560_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_40000000* tcd = (_0RL_cd_FF8C1277964B9560_40000000*)cd;
  org::cfn::scad::core::corba::db::_impl_Database* impl = (org::cfn::scad::core::corba::db::_impl_Database*) svnt->_ptrToInterface(org::cfn::scad::core::corba::db::Database::_PD_repoId);
  impl->addNode(tcd->arg_0, tcd->arg_1);


}

void org::cfn::scad::core::corba::db::_objref_Database::addNode(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* nodeXML)
{
  _0RL_cd_FF8C1277964B9560_40000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_50000000, "addNode", 8);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = nodeXML;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mdb_mDataList_i_cwstring_i_cwstring_i_cwstring_i_clonglong_i_cwstring
class _0RL_cd_FF8C1277964B9560_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_60000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  CORBA::LongLong arg_3;
  CORBA::WString_var arg_4_;
  const CORBA::WChar* arg_4;
  org::cfn::scad::core::corba::db::DataList_var result;
};

void _0RL_cd_FF8C1277964B9560_60000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);
  arg_3 >>= _n;
  _n.marshalWString(arg_4,0);

}

void _0RL_cd_FF8C1277964B9560_60000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();
  (CORBA::LongLong&)arg_3 <<= _n;
  arg_4_ = _n.unmarshalWString(0);
  arg_4 = arg_4_.in();

}

void _0RL_cd_FF8C1277964B9560_60000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::db::DataList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_60000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::db::DataList;
  (org::cfn::scad::core::corba::db::DataList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_60000000* tcd = (_0RL_cd_FF8C1277964B9560_60000000*)cd;
  org::cfn::scad::core::corba::db::_impl_Database* impl = (org::cfn::scad::core::corba::db::_impl_Database*) svnt->_ptrToInterface(org::cfn::scad::core::corba::db::Database::_PD_repoId);
  tcd->result = impl->getData(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);


}

org::cfn::scad::core::corba::db::DataList* org::cfn::scad::core::corba::db::_objref_Database::getData(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, CORBA::LongLong event_id, const CORBA::WChar* event_name_id)
{
  _0RL_cd_FF8C1277964B9560_60000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_70000000, "getData", 8);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = parameterUniqueID;
  _call_desc.arg_3 = event_id;
  _call_desc.arg_4 = event_name_id;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mdb_mDataList_i_cwstring_i_cwstring_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mutil_mTimeStamp_i_corg_mcfn_mscad_mcore_mcorba_mutil_mTimeStamp
class _0RL_cd_FF8C1277964B9560_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_80000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  org::cfn::scad::core::corba::util::TimeStamp arg_3_;
  const org::cfn::scad::core::corba::util::TimeStamp* arg_3;
  org::cfn::scad::core::corba::util::TimeStamp arg_4_;
  const org::cfn::scad::core::corba::util::TimeStamp* arg_4;
  org::cfn::scad::core::corba::db::DataList_var result;
};

void _0RL_cd_FF8C1277964B9560_80000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);
  (const org::cfn::scad::core::corba::util::TimeStamp&) *arg_3 >>= _n;
  (const org::cfn::scad::core::corba::util::TimeStamp&) *arg_4 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_80000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();
  (org::cfn::scad::core::corba::util::TimeStamp&)arg_3_ <<= _n;
  arg_3 = &arg_3_;
  (org::cfn::scad::core::corba::util::TimeStamp&)arg_4_ <<= _n;
  arg_4 = &arg_4_;

}

void _0RL_cd_FF8C1277964B9560_80000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::db::DataList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_80000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::db::DataList;
  (org::cfn::scad::core::corba::db::DataList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_80000000* tcd = (_0RL_cd_FF8C1277964B9560_80000000*)cd;
  org::cfn::scad::core::corba::db::_impl_Database* impl = (org::cfn::scad::core::corba::db::_impl_Database*) svnt->_ptrToInterface(org::cfn::scad::core::corba::db::Database::_PD_repoId);
  tcd->result = impl->getDataFromTime(tcd->arg_0, tcd->arg_1, tcd->arg_2, *tcd->arg_3, *tcd->arg_4);


}

org::cfn::scad::core::corba::db::DataList* org::cfn::scad::core::corba::db::_objref_Database::getDataFromTime(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, const util::TimeStamp& tstart, const util::TimeStamp& tend)
{
  _0RL_cd_FF8C1277964B9560_80000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_90000000, "getDataFromTime", 16);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = parameterUniqueID;
  _call_desc.arg_3 = &(util::TimeStamp&) tstart;
  _call_desc.arg_4 = &(util::TimeStamp&) tend;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mEventList
class _0RL_cd_FF8C1277964B9560_a0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_a0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  org::cfn::scad::core::corba::hardware::EventList_var arg_0_;
  const org::cfn::scad::core::corba::hardware::EventList* arg_0;
};

void _0RL_cd_FF8C1277964B9560_a0000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::EventList&) *arg_0 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_a0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::hardware::EventList;
  (org::cfn::scad::core::corba::hardware::EventList&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_a0000000* tcd = (_0RL_cd_FF8C1277964B9560_a0000000*)cd;
  org::cfn::scad::core::corba::db::_impl_Database* impl = (org::cfn::scad::core::corba::db::_impl_Database*) svnt->_ptrToInterface(org::cfn::scad::core::corba::db::Database::_PD_repoId);
  impl->newEventListAvailable(*tcd->arg_0);


}

void org::cfn::scad::core::corba::db::_objref_Database::newEventListAvailable(const hardware::EventList& evtList)
{
  _0RL_cd_FF8C1277964B9560_a0000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_b0000000, "newEventListAvailable", 22);
  _call_desc.arg_0 = &(hardware::EventList&) evtList;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mNameInfoList_i_corg_mcfn_mscad_mcore_mcorba_mutil_mStringList
class _0RL_cd_FF8C1277964B9560_c0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_c0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  org::cfn::scad::core::corba::util::StringList_var arg_0_;
  const org::cfn::scad::core::corba::util::StringList* arg_0;
  org::cfn::scad::core::corba::hardware::NameInfoList_var result;
};

void _0RL_cd_FF8C1277964B9560_c0000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::util::StringList&) *arg_0 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_c0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::util::StringList;
  (org::cfn::scad::core::corba::util::StringList&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_FF8C1277964B9560_c0000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::NameInfoList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_c0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::hardware::NameInfoList;
  (org::cfn::scad::core::corba::hardware::NameInfoList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_d0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_c0000000* tcd = (_0RL_cd_FF8C1277964B9560_c0000000*)cd;
  org::cfn::scad::core::corba::db::_impl_Database* impl = (org::cfn::scad::core::corba::db::_impl_Database*) svnt->_ptrToInterface(org::cfn::scad::core::corba::db::Database::_PD_repoId);
  tcd->result = impl->getNodesNames(*tcd->arg_0);


}

org::cfn::scad::core::corba::hardware::NameInfoList* org::cfn::scad::core::corba::db::_objref_Database::getNodesNames(const util::StringList& nodeUIDs)
{
  _0RL_cd_FF8C1277964B9560_c0000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_d0000000, "getNodesNames", 14);
  _call_desc.arg_0 = &(util::StringList&) nodeUIDs;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mNameInfoList_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mutil_mStringList
class _0RL_cd_FF8C1277964B9560_e0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_e0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  org::cfn::scad::core::corba::util::StringList_var arg_1_;
  const org::cfn::scad::core::corba::util::StringList* arg_1;
  org::cfn::scad::core::corba::hardware::NameInfoList_var result;
};

void _0RL_cd_FF8C1277964B9560_e0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  (const org::cfn::scad::core::corba::util::StringList&) *arg_1 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_e0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = new org::cfn::scad::core::corba::util::StringList;
  (org::cfn::scad::core::corba::util::StringList&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_FF8C1277964B9560_e0000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::NameInfoList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_e0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::hardware::NameInfoList;
  (org::cfn::scad::core::corba::hardware::NameInfoList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_f0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_e0000000* tcd = (_0RL_cd_FF8C1277964B9560_e0000000*)cd;
  org::cfn::scad::core::corba::db::_impl_Database* impl = (org::cfn::scad::core::corba::db::_impl_Database*) svnt->_ptrToInterface(org::cfn::scad::core::corba::db::Database::_PD_repoId);
  tcd->result = impl->getHardwareAndParameterNames(tcd->arg_0, *tcd->arg_1);


}

org::cfn::scad::core::corba::hardware::NameInfoList* org::cfn::scad::core::corba::db::_objref_Database::getHardwareAndParameterNames(const CORBA::WChar* nodeUID, const util::StringList& hwUIDs)
{
  _0RL_cd_FF8C1277964B9560_e0000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_f0000000, "getHardwareAndParameterNames", 29);
  _call_desc.arg_0 = nodeUID;
  _call_desc.arg_1 = &(util::StringList&) hwUIDs;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mNameInfo
class _0RL_cd_FF8C1277964B9560_01000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_01000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  org::cfn::scad::core::corba::hardware::NameInfo_var arg_0_;
  const org::cfn::scad::core::corba::hardware::NameInfo* arg_0;
};

void _0RL_cd_FF8C1277964B9560_01000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::NameInfo&) *arg_0 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_01000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::hardware::NameInfo;
  (org::cfn::scad::core::corba::hardware::NameInfo&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_11000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_01000000* tcd = (_0RL_cd_FF8C1277964B9560_01000000*)cd;
  org::cfn::scad::core::corba::db::_impl_Database* impl = (org::cfn::scad::core::corba::db::_impl_Database*) svnt->_ptrToInterface(org::cfn::scad::core::corba::db::Database::_PD_repoId);
  impl->changeName(*tcd->arg_0);


}

void org::cfn::scad::core::corba::db::_objref_Database::changeName(const hardware::NameInfo& ninfo)
{
  _0RL_cd_FF8C1277964B9560_01000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_11000000, "changeName", 11);
  _call_desc.arg_0 = &(hardware::NameInfo&) ninfo;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mutil_mCommentList_i_corg_mcfn_mscad_mcore_mcorba_mutil_mTimeStamp_i_corg_mcfn_mscad_mcore_mcorba_mutil_mTimeStamp
class _0RL_cd_FF8C1277964B9560_21000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_21000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  org::cfn::scad::core::corba::util::TimeStamp arg_0_;
  const org::cfn::scad::core::corba::util::TimeStamp* arg_0;
  org::cfn::scad::core::corba::util::TimeStamp arg_1_;
  const org::cfn::scad::core::corba::util::TimeStamp* arg_1;
  org::cfn::scad::core::corba::util::CommentList_var result;
};

void _0RL_cd_FF8C1277964B9560_21000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::util::TimeStamp&) *arg_0 >>= _n;
  (const org::cfn::scad::core::corba::util::TimeStamp&) *arg_1 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_21000000::unmarshalArguments(cdrStream& _n)
{
  (org::cfn::scad::core::corba::util::TimeStamp&)arg_0_ <<= _n;
  arg_0 = &arg_0_;
  (org::cfn::scad::core::corba::util::TimeStamp&)arg_1_ <<= _n;
  arg_1 = &arg_1_;

}

void _0RL_cd_FF8C1277964B9560_21000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::util::CommentList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_21000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::util::CommentList;
  (org::cfn::scad::core::corba::util::CommentList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_21000000* tcd = (_0RL_cd_FF8C1277964B9560_21000000*)cd;
  org::cfn::scad::core::corba::db::_impl_Database* impl = (org::cfn::scad::core::corba::db::_impl_Database*) svnt->_ptrToInterface(org::cfn::scad::core::corba::db::Database::_PD_repoId);
  tcd->result = impl->getComments(*tcd->arg_0, *tcd->arg_1);


}

org::cfn::scad::core::corba::util::CommentList* org::cfn::scad::core::corba::db::_objref_Database::getComments(const util::TimeStamp& from, const util::TimeStamp& to)
{
  _0RL_cd_FF8C1277964B9560_21000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_31000000, "getComments", 12);
  _call_desc.arg_0 = &(util::TimeStamp&) from;
  _call_desc.arg_1 = &(util::TimeStamp&) to;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mutil_mCommentList_i_cshort
class _0RL_cd_FF8C1277964B9560_41000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_41000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::Short arg_0;
  org::cfn::scad::core::corba::util::CommentList_var result;
};

void _0RL_cd_FF8C1277964B9560_41000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_41000000::unmarshalArguments(cdrStream& _n)
{
  (CORBA::Short&)arg_0 <<= _n;

}

void _0RL_cd_FF8C1277964B9560_41000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::util::CommentList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_41000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::util::CommentList;
  (org::cfn::scad::core::corba::util::CommentList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_51000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_41000000* tcd = (_0RL_cd_FF8C1277964B9560_41000000*)cd;
  org::cfn::scad::core::corba::db::_impl_Database* impl = (org::cfn::scad::core::corba::db::_impl_Database*) svnt->_ptrToInterface(org::cfn::scad::core::corba::db::Database::_PD_repoId);
  tcd->result = impl->getLastComments(tcd->arg_0);


}

org::cfn::scad::core::corba::util::CommentList* org::cfn::scad::core::corba::db::_objref_Database::getLastComments(CORBA::Short number)
{
  _0RL_cd_FF8C1277964B9560_41000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_51000000, "getLastComments", 16);
  _call_desc.arg_0 = number;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mutil_mComment
class _0RL_cd_FF8C1277964B9560_61000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_61000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  org::cfn::scad::core::corba::util::Comment_var arg_0_;
  const org::cfn::scad::core::corba::util::Comment* arg_0;
};

void _0RL_cd_FF8C1277964B9560_61000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::util::Comment&) *arg_0 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_61000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::util::Comment;
  (org::cfn::scad::core::corba::util::Comment&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_71000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_61000000* tcd = (_0RL_cd_FF8C1277964B9560_61000000*)cd;
  org::cfn::scad::core::corba::db::_impl_Database* impl = (org::cfn::scad::core::corba::db::_impl_Database*) svnt->_ptrToInterface(org::cfn::scad::core::corba::db::Database::_PD_repoId);
  impl->addComment(*tcd->arg_0);


}

void org::cfn::scad::core::corba::db::_objref_Database::addComment(const util::Comment& newComment)
{
  _0RL_cd_FF8C1277964B9560_61000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_71000000, "addComment", 11);
  _call_desc.arg_0 = &(util::Comment&) newComment;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mutil_mComment_i_corg_mcfn_mscad_mcore_mcorba_mutil_mComment
class _0RL_cd_FF8C1277964B9560_81000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_81000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  org::cfn::scad::core::corba::util::Comment_var arg_0_;
  const org::cfn::scad::core::corba::util::Comment* arg_0;
  org::cfn::scad::core::corba::util::Comment_var arg_1_;
  const org::cfn::scad::core::corba::util::Comment* arg_1;
};

void _0RL_cd_FF8C1277964B9560_81000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::util::Comment&) *arg_0 >>= _n;
  (const org::cfn::scad::core::corba::util::Comment&) *arg_1 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_81000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::util::Comment;
  (org::cfn::scad::core::corba::util::Comment&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new org::cfn::scad::core::corba::util::Comment;
  (org::cfn::scad::core::corba::util::Comment&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_91000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_81000000* tcd = (_0RL_cd_FF8C1277964B9560_81000000*)cd;
  org::cfn::scad::core::corba::db::_impl_Database* impl = (org::cfn::scad::core::corba::db::_impl_Database*) svnt->_ptrToInterface(org::cfn::scad::core::corba::db::Database::_PD_repoId);
  impl->editComment(*tcd->arg_0, *tcd->arg_1);


}

void org::cfn::scad::core::corba::db::_objref_Database::editComment(const util::Comment& toEdit, const util::Comment& toReplace)
{
  _0RL_cd_FF8C1277964B9560_81000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_91000000, "editComment", 12);
  _call_desc.arg_0 = &(util::Comment&) toEdit;
  _call_desc.arg_1 = &(util::Comment&) toReplace;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_a1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_61000000* tcd = (_0RL_cd_FF8C1277964B9560_61000000*)cd;
  org::cfn::scad::core::corba::db::_impl_Database* impl = (org::cfn::scad::core::corba::db::_impl_Database*) svnt->_ptrToInterface(org::cfn::scad::core::corba::db::Database::_PD_repoId);
  impl->removeComment(*tcd->arg_0);


}

void org::cfn::scad::core::corba::db::_objref_Database::removeComment(const util::Comment& toRemove)
{
  _0RL_cd_FF8C1277964B9560_61000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_a1000000, "removeComment", 14);
  _call_desc.arg_0 = &(util::Comment&) toRemove;

  _invoke(_call_desc);



}
org::cfn::scad::core::corba::db::_pof_Database::~_pof_Database() {}


omniObjRef*
org::cfn::scad::core::corba::db::_pof_Database::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::org::cfn::scad::core::corba::db::_objref_Database(ior, id);
}


CORBA::Boolean
org::cfn::scad::core::corba::db::_pof_Database::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::org::cfn::scad::core::corba::db::Database::_PD_repoId) )
    return 1;

  return 0;
}

const org::cfn::scad::core::corba::db::_pof_Database _the_pof_org_mcfn_mscad_mcore_mcorba_mdb_mDatabase;

org::cfn::scad::core::corba::db::_impl_Database::~_impl_Database() {}


CORBA::Boolean
org::cfn::scad::core::corba::db::_impl_Database::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "putData") ) {

    _0RL_cd_FF8C1277964B9560_00000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_10000000, "putData", 8, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "addHardware") ) {

    _0RL_cd_FF8C1277964B9560_20000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_30000000, "addHardware", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "addNode") ) {

    _0RL_cd_FF8C1277964B9560_40000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_50000000, "addNode", 8, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getData") ) {

    _0RL_cd_FF8C1277964B9560_60000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_70000000, "getData", 8, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getDataFromTime") ) {

    _0RL_cd_FF8C1277964B9560_80000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_90000000, "getDataFromTime", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "newEventListAvailable") ) {

    _0RL_cd_FF8C1277964B9560_a0000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_b0000000, "newEventListAvailable", 22, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getNodesNames") ) {

    _0RL_cd_FF8C1277964B9560_c0000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_d0000000, "getNodesNames", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getHardwareAndParameterNames") ) {

    _0RL_cd_FF8C1277964B9560_e0000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_f0000000, "getHardwareAndParameterNames", 29, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "changeName") ) {

    _0RL_cd_FF8C1277964B9560_01000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_11000000, "changeName", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getComments") ) {

    _0RL_cd_FF8C1277964B9560_21000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_31000000, "getComments", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getLastComments") ) {

    _0RL_cd_FF8C1277964B9560_41000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_51000000, "getLastComments", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "addComment") ) {

    _0RL_cd_FF8C1277964B9560_61000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_71000000, "addComment", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "editComment") ) {

    _0RL_cd_FF8C1277964B9560_81000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_91000000, "editComment", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "removeComment") ) {

    _0RL_cd_FF8C1277964B9560_61000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_a1000000, "removeComment", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
org::cfn::scad::core::corba::db::_impl_Database::_ptrToInterface(const char* id)
{
  if( id == ::org::cfn::scad::core::corba::db::Database::_PD_repoId )
    return (::org::cfn::scad::core::corba::db::_impl_Database*) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::org::cfn::scad::core::corba::db::Database::_PD_repoId) )
    return (::org::cfn::scad::core::corba::db::_impl_Database*) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
org::cfn::scad::core::corba::db::_impl_Database::_mostDerivedRepoId()
{
  return ::org::cfn::scad::core::corba::db::Database::_PD_repoId;
}

CORBA::Exception::insertExceptionToAny org::cfn::scad::core::corba::security::SecurityException::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP org::cfn::scad::core::corba::security::SecurityException::insertToAnyFnNCP = 0;

org::cfn::scad::core::corba::security::SecurityException::SecurityException(const org::cfn::scad::core::corba::security::SecurityException& _s) : CORBA::UserException(_s)
{
  errorID = _s.errorID;

}

org::cfn::scad::core::corba::security::SecurityException::SecurityException(SecurityError _errorID)
{
  pd_insertToAnyFn    = org::cfn::scad::core::corba::security::SecurityException::insertToAnyFn;
  pd_insertToAnyFnNCP = org::cfn::scad::core::corba::security::SecurityException::insertToAnyFnNCP;
  errorID = _errorID;

}



org::cfn::scad::core::corba::security::SecurityException& org::cfn::scad::core::corba::security::SecurityException::operator=(const org::cfn::scad::core::corba::security::SecurityException& _s)
{
  ((CORBA::UserException*) this)->operator=(_s);
  errorID = _s.errorID;

  return *this;
}

org::cfn::scad::core::corba::security::SecurityException::~SecurityException() {}

void org::cfn::scad::core::corba::security::SecurityException::_raise() const { throw *this; }

const char* org::cfn::scad::core::corba::security::SecurityException::_PD_repoId = "IDL:org/cfn/scad/core/corba/security/SecurityException:1.0";
const char* org::cfn::scad::core::corba::security::SecurityException::_PD_typeId = "Exception/UserException/org::cfn::scad::core::corba::security::SecurityException";

org::cfn::scad::core::corba::security::SecurityException* org::cfn::scad::core::corba::security::SecurityException::_downcast(CORBA::Exception* _e) {
  return (SecurityException*) _NP_is_a(_e, _PD_typeId);
}

const org::cfn::scad::core::corba::security::SecurityException* org::cfn::scad::core::corba::security::SecurityException::_downcast(const CORBA::Exception* _e) {
  return (const SecurityException*) _NP_is_a(_e, _PD_typeId);
}

CORBA::Exception* org::cfn::scad::core::corba::security::SecurityException::_NP_duplicate() const {
  return new SecurityException(*this);
}

const char* org::cfn::scad::core::corba::security::SecurityException::_NP_typeId() const {
  return _PD_typeId;
}

const char* org::cfn::scad::core::corba::security::SecurityException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:org/cfn/scad/core/corba/security/SecurityException:1.0");
  return _PD_repoId;
}

void org::cfn::scad::core::corba::security::SecurityException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
org::cfn::scad::core::corba::security::SecurityException::operator>>= (cdrStream& _n) const
{
  errorID >>= _n;

}

void
org::cfn::scad::core::corba::security::SecurityException::operator<<= (cdrStream& _n)
{
  (SecurityError&)errorID <<= _n;

}

CORBA::Exception::insertExceptionToAny org::cfn::scad::core::corba::security::ManagementException::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP org::cfn::scad::core::corba::security::ManagementException::insertToAnyFnNCP = 0;

org::cfn::scad::core::corba::security::ManagementException::ManagementException(const org::cfn::scad::core::corba::security::ManagementException& _s) : CORBA::UserException(_s)
{
  error = _s.error;

}

org::cfn::scad::core::corba::security::ManagementException::ManagementException(const CORBA::WChar* _error)
{
  pd_insertToAnyFn    = org::cfn::scad::core::corba::security::ManagementException::insertToAnyFn;
  pd_insertToAnyFnNCP = org::cfn::scad::core::corba::security::ManagementException::insertToAnyFnNCP;
  error = _error;

}



org::cfn::scad::core::corba::security::ManagementException& org::cfn::scad::core::corba::security::ManagementException::operator=(const org::cfn::scad::core::corba::security::ManagementException& _s)
{
  ((CORBA::UserException*) this)->operator=(_s);
  error = _s.error;

  return *this;
}

org::cfn::scad::core::corba::security::ManagementException::~ManagementException() {}

void org::cfn::scad::core::corba::security::ManagementException::_raise() const { throw *this; }

const char* org::cfn::scad::core::corba::security::ManagementException::_PD_repoId = "IDL:org/cfn/scad/core/corba/security/ManagementException:1.0";
const char* org::cfn::scad::core::corba::security::ManagementException::_PD_typeId = "Exception/UserException/org::cfn::scad::core::corba::security::ManagementException";

org::cfn::scad::core::corba::security::ManagementException* org::cfn::scad::core::corba::security::ManagementException::_downcast(CORBA::Exception* _e) {
  return (ManagementException*) _NP_is_a(_e, _PD_typeId);
}

const org::cfn::scad::core::corba::security::ManagementException* org::cfn::scad::core::corba::security::ManagementException::_downcast(const CORBA::Exception* _e) {
  return (const ManagementException*) _NP_is_a(_e, _PD_typeId);
}

CORBA::Exception* org::cfn::scad::core::corba::security::ManagementException::_NP_duplicate() const {
  return new ManagementException(*this);
}

const char* org::cfn::scad::core::corba::security::ManagementException::_NP_typeId() const {
  return _PD_typeId;
}

const char* org::cfn::scad::core::corba::security::ManagementException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:org/cfn/scad/core/corba/security/ManagementException:1.0");
  return _PD_repoId;
}

void org::cfn::scad::core::corba::security::ManagementException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
org::cfn::scad::core::corba::security::ManagementException::operator>>= (cdrStream& _n) const
{
  _n.marshalWString(error,0);

}

void
org::cfn::scad::core::corba::security::ManagementException::operator<<= (cdrStream& _n)
{
  error = _n.unmarshalWString(0);

}

void
org::cfn::scad::core::corba::clients::User::operator>>= (cdrStream &_n) const
{
  _n.marshalWString(username,0);
  (const util::CharArray&) password >>= _n;
  _n.marshalBoolean(_cxx_operator);
  _n.marshalBoolean(administrator);
  _n.marshalBoolean(connectedToChat);
  _n.marshalBoolean(connectedToVC);
  (const util::StringList&) ipaddresses >>= _n;
  _n.marshalWString(hostname,0);
  (const util::StringList&) groups >>= _n;

}

void
org::cfn::scad::core::corba::clients::User::operator<<= (cdrStream &_n)
{
  username = _n.unmarshalWString(0);
  (util::CharArray&)password <<= _n;
  _cxx_operator = _n.unmarshalBoolean();
  administrator = _n.unmarshalBoolean();
  connectedToChat = _n.unmarshalBoolean();
  connectedToVC = _n.unmarshalBoolean();
  (util::StringList&)ipaddresses <<= _n;
  hostname = _n.unmarshalWString(0);
  (util::StringList&)groups <<= _n;

}

void
org::cfn::scad::core::corba::clients::Institution::operator>>= (cdrStream &_n) const
{
  _n.marshalWString(name,0);
  _n.marshalWString(address,0);
  _n.marshalWString(phone,0);
  _n.marshalWString(fax,0);
  _n.marshalWString(webpage,0);

}

void
org::cfn::scad::core::corba::clients::Institution::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalWString(0);
  address = _n.unmarshalWString(0);
  phone = _n.unmarshalWString(0);
  fax = _n.unmarshalWString(0);
  webpage = _n.unmarshalWString(0);

}

void
org::cfn::scad::core::corba::clients::UserInformations::operator>>= (cdrStream &_n) const
{
  _n.marshalWString(username,0);
  _n.marshalWString(name,0);
  _n.marshalWString(email,0);
  _n.marshalWString(phone1,0);
  _n.marshalWString(phone2,0);
  _n.marshalWString(fax,0);
  _n.marshalWString(country,0);
  prof >>= _n;
  (const Institution&) institute >>= _n;
  (const util::ByteArray&) picture >>= _n;

}

void
org::cfn::scad::core::corba::clients::UserInformations::operator<<= (cdrStream &_n)
{
  username = _n.unmarshalWString(0);
  name = _n.unmarshalWString(0);
  email = _n.unmarshalWString(0);
  phone1 = _n.unmarshalWString(0);
  phone2 = _n.unmarshalWString(0);
  fax = _n.unmarshalWString(0);
  country = _n.unmarshalWString(0);
  (Profession&)prof <<= _n;
  (Institution&)institute <<= _n;
  (util::ByteArray&)picture <<= _n;

}

CORBA::Exception::insertExceptionToAny org::cfn::scad::core::corba::hardware::ConfigurationException::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP org::cfn::scad::core::corba::hardware::ConfigurationException::insertToAnyFnNCP = 0;

org::cfn::scad::core::corba::hardware::ConfigurationException::ConfigurationException(const org::cfn::scad::core::corba::hardware::ConfigurationException& _s) : CORBA::UserException(_s)
{
  errorID = _s.errorID;

}

org::cfn::scad::core::corba::hardware::ConfigurationException::ConfigurationException(ConfigurationError _errorID)
{
  pd_insertToAnyFn    = org::cfn::scad::core::corba::hardware::ConfigurationException::insertToAnyFn;
  pd_insertToAnyFnNCP = org::cfn::scad::core::corba::hardware::ConfigurationException::insertToAnyFnNCP;
  errorID = _errorID;

}



org::cfn::scad::core::corba::hardware::ConfigurationException& org::cfn::scad::core::corba::hardware::ConfigurationException::operator=(const org::cfn::scad::core::corba::hardware::ConfigurationException& _s)
{
  ((CORBA::UserException*) this)->operator=(_s);
  errorID = _s.errorID;

  return *this;
}

org::cfn::scad::core::corba::hardware::ConfigurationException::~ConfigurationException() {}

void org::cfn::scad::core::corba::hardware::ConfigurationException::_raise() const { throw *this; }

const char* org::cfn::scad::core::corba::hardware::ConfigurationException::_PD_repoId = "IDL:org/cfn/scad/core/corba/hardware/ConfigurationException:1.0";
const char* org::cfn::scad::core::corba::hardware::ConfigurationException::_PD_typeId = "Exception/UserException/org::cfn::scad::core::corba::hardware::ConfigurationException";

org::cfn::scad::core::corba::hardware::ConfigurationException* org::cfn::scad::core::corba::hardware::ConfigurationException::_downcast(CORBA::Exception* _e) {
  return (ConfigurationException*) _NP_is_a(_e, _PD_typeId);
}

const org::cfn::scad::core::corba::hardware::ConfigurationException* org::cfn::scad::core::corba::hardware::ConfigurationException::_downcast(const CORBA::Exception* _e) {
  return (const ConfigurationException*) _NP_is_a(_e, _PD_typeId);
}

CORBA::Exception* org::cfn::scad::core::corba::hardware::ConfigurationException::_NP_duplicate() const {
  return new ConfigurationException(*this);
}

const char* org::cfn::scad::core::corba::hardware::ConfigurationException::_NP_typeId() const {
  return _PD_typeId;
}

const char* org::cfn::scad::core::corba::hardware::ConfigurationException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:org/cfn/scad/core/corba/hardware/ConfigurationException:1.0");
  return _PD_repoId;
}

void org::cfn::scad::core::corba::hardware::ConfigurationException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
org::cfn::scad::core::corba::hardware::ConfigurationException::operator>>= (cdrStream& _n) const
{
  errorID >>= _n;

}

void
org::cfn::scad::core::corba::hardware::ConfigurationException::operator<<= (cdrStream& _n)
{
  (ConfigurationError&)errorID <<= _n;

}

void
org::cfn::scad::core::corba::hardware::HardwareStatusUID::operator>>= (cdrStream &_n) const
{
  _n.marshalWString(uniqueID,0);
  stat >>= _n;

}

void
org::cfn::scad::core::corba::hardware::HardwareStatusUID::operator<<= (cdrStream &_n)
{
  uniqueID = _n.unmarshalWString(0);
  (HardwareStatus&)stat <<= _n;

}

void
org::cfn::scad::core::corba::hardware::TransferFunction::operator>>= (cdrStream &_n) const
{
  _n.marshalWString(function,0);
  _n.marshalWString(units,0);

}

void
org::cfn::scad::core::corba::hardware::TransferFunction::operator<<= (cdrStream &_n)
{
  function = _n.unmarshalWString(0);
  units = _n.unmarshalWString(0);

}

void
org::cfn::scad::core::corba::hardware::Connection::operator>>= (cdrStream &_n) const
{
  _n.marshalWString(uniqueID,0);
  status >>= _n;

}

void
org::cfn::scad::core::corba::hardware::Connection::operator<<= (cdrStream &_n)
{
  uniqueID = _n.unmarshalWString(0);
  (ConnectionStatus&)status <<= _n;

}

void
org::cfn::scad::core::corba::hardware::FieldData::operator>>= (cdrStream &_n) const
{
  _n.marshalWString(fieldUniqueID,0);
  (const util::ByteArray&) value >>= _n;

}

void
org::cfn::scad::core::corba::hardware::FieldData::operator<<= (cdrStream &_n)
{
  fieldUniqueID = _n.unmarshalWString(0);
  (util::ByteArray&)value <<= _n;

}

void
org::cfn::scad::core::corba::hardware::HardwareLock::operator>>= (cdrStream &_n) const
{
  _n.marshalWString(nodeUniqueID,0);
  _n.marshalWString(hardwareUniqueID,0);
  (const clients::User&) owner >>= _n;
  status >>= _n;

}

void
org::cfn::scad::core::corba::hardware::HardwareLock::operator<<= (cdrStream &_n)
{
  nodeUniqueID = _n.unmarshalWString(0);
  hardwareUniqueID = _n.unmarshalWString(0);
  (clients::User&)owner <<= _n;
  (HardwareLockStatus&)status <<= _n;

}

void
org::cfn::scad::core::corba::hardware::ExtraLib::operator>>= (cdrStream &_n) const
{
  (const util::TimeStamp&) lastModified >>= _n;
  (const util::ByteArray&) jarFile >>= _n;

}

void
org::cfn::scad::core::corba::hardware::ExtraLib::operator<<= (cdrStream &_n)
{
  (util::TimeStamp&)lastModified <<= _n;
  (util::ByteArray&)jarFile <<= _n;

}

org::cfn::scad::core::corba::hardware::Node_ptr org::cfn::scad::core::corba::hardware::Node_Helper::_nil() {
  return ::org::cfn::scad::core::corba::hardware::Node::_nil();
}

CORBA::Boolean org::cfn::scad::core::corba::hardware::Node_Helper::is_nil(::org::cfn::scad::core::corba::hardware::Node_ptr p) {
  return CORBA::is_nil(p);

}

void org::cfn::scad::core::corba::hardware::Node_Helper::release(::org::cfn::scad::core::corba::hardware::Node_ptr p) {
  CORBA::release(p);
}

void org::cfn::scad::core::corba::hardware::Node_Helper::marshalObjRef(::org::cfn::scad::core::corba::hardware::Node_ptr obj, cdrStream& s) {
  ::org::cfn::scad::core::corba::hardware::Node::_marshalObjRef(obj, s);
}

org::cfn::scad::core::corba::hardware::Node_ptr org::cfn::scad::core::corba::hardware::Node_Helper::unmarshalObjRef(cdrStream& s) {
  return ::org::cfn::scad::core::corba::hardware::Node::_unmarshalObjRef(s);
}

void org::cfn::scad::core::corba::hardware::Node_Helper::duplicate(::org::cfn::scad::core::corba::hardware::Node_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

org::cfn::scad::core::corba::hardware::Node_ptr
org::cfn::scad::core::corba::hardware::Node::_duplicate(::org::cfn::scad::core::corba::hardware::Node_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

org::cfn::scad::core::corba::hardware::Node_ptr
org::cfn::scad::core::corba::hardware::Node::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


org::cfn::scad::core::corba::hardware::Node_ptr
org::cfn::scad::core::corba::hardware::Node::_unchecked_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

org::cfn::scad::core::corba::hardware::Node_ptr
org::cfn::scad::core::corba::hardware::Node::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Node _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Node* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Node;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* org::cfn::scad::core::corba::hardware::Node::_PD_repoId = "IDL:org/cfn/scad/core/corba/hardware/Node:1.0";


org::cfn::scad::core::corba::hardware::_objref_Node::~_objref_Node() {

}


org::cfn::scad::core::corba::hardware::_objref_Node::_objref_Node(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::org::cfn::scad::core::corba::hardware::Node::_PD_repoId, ior, id, 1)


{
  _PR_setobj(this);
}

void*
org::cfn::scad::core::corba::hardware::_objref_Node::_ptrToObjRef(const char* id)
{
  if( id == ::org::cfn::scad::core::corba::hardware::Node::_PD_repoId )
    return (::org::cfn::scad::core::corba::hardware::Node_ptr) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::org::cfn::scad::core::corba::hardware::Node::_PD_repoId) )
    return (::org::cfn::scad::core::corba::hardware::Node_ptr) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cwstring
class _0RL_cd_FF8C1277964B9560_b1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_b1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var result;
};

void _0RL_cd_FF8C1277964B9560_b1000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalWString(result,0);

}

void _0RL_cd_FF8C1277964B9560_b1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalWString(0);

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_c1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_b1000000* tcd = (_0RL_cd_FF8C1277964B9560_b1000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  tcd->result = impl->getNodeInfo();


}

CORBA::WChar* org::cfn::scad::core::corba::hardware::_objref_Node::getNodeInfo()
{
  _0RL_cd_FF8C1277964B9560_b1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_c1000000, "getNodeInfo", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mutil_mStringList
class _0RL_cd_FF8C1277964B9560_d1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_d1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  org::cfn::scad::core::corba::util::StringList_var result;
};

void _0RL_cd_FF8C1277964B9560_d1000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::util::StringList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_d1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::util::StringList;
  (org::cfn::scad::core::corba::util::StringList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_e1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_d1000000* tcd = (_0RL_cd_FF8C1277964B9560_d1000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  tcd->result = impl->getHardwareInfos();


}

org::cfn::scad::core::corba::util::StringList* org::cfn::scad::core::corba::hardware::_objref_Node::getHardwareInfos()
{
  _0RL_cd_FF8C1277964B9560_d1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_e1000000, "getHardwareInfos", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_FF8C1277964B9560_f1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_f1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }





};

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_02000000(omniCallDescriptor* cd, omniServant* svnt)
{

  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  impl->ping();


}

void org::cfn::scad::core::corba::hardware::_objref_Node::ping()
{
  _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_02000000, "ping", 5);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mFieldData_i_cwstring_i_cwstring_i_cwstring
class _0RL_cd_FF8C1277964B9560_12000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_12000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  org::cfn::scad::core::corba::hardware::FieldData_var result;
};

void _0RL_cd_FF8C1277964B9560_12000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);

}

void _0RL_cd_FF8C1277964B9560_12000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();

}

void _0RL_cd_FF8C1277964B9560_12000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::FieldData&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_12000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::hardware::FieldData;
  (org::cfn::scad::core::corba::hardware::FieldData&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_22000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_12000000* tcd = (_0RL_cd_FF8C1277964B9560_12000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  tcd->result = impl->getParameterValue(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

org::cfn::scad::core::corba::hardware::FieldData* org::cfn::scad::core::corba::hardware::_objref_Node::getParameterValue(const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, const CORBA::WChar* fieldUniqueID)
{
  _0RL_cd_FF8C1277964B9560_12000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_22000000, "getParameterValue", 18);
  _call_desc.arg_0 = hardwareUniqueID;
  _call_desc.arg_1 = parameterUniqueID;
  _call_desc.arg_2 = fieldUniqueID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mFieldDataList_i_cwstring_i_cwstring
class _0RL_cd_FF8C1277964B9560_32000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_32000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  org::cfn::scad::core::corba::hardware::FieldDataList_var result;
};

void _0RL_cd_FF8C1277964B9560_32000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);

}

void _0RL_cd_FF8C1277964B9560_32000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_FF8C1277964B9560_32000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::FieldDataList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_32000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::hardware::FieldDataList;
  (org::cfn::scad::core::corba::hardware::FieldDataList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_42000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_32000000* tcd = (_0RL_cd_FF8C1277964B9560_32000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  tcd->result = impl->getParameterValues(tcd->arg_0, tcd->arg_1);


}

org::cfn::scad::core::corba::hardware::FieldDataList* org::cfn::scad::core::corba::hardware::_objref_Node::getParameterValues(const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID)
{
  _0RL_cd_FF8C1277964B9560_32000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_42000000, "getParameterValues", 19);
  _call_desc.arg_0 = hardwareUniqueID;
  _call_desc.arg_1 = parameterUniqueID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mFieldDataList_e_corg_mcfn_mscad_mcore_mcorba_mhardware_mConfigurationException
class _0RL_cd_FF8C1277964B9560_52000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_52000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  org::cfn::scad::core::corba::hardware::FieldDataList_var arg_2_;
  const org::cfn::scad::core::corba::hardware::FieldDataList* arg_2;
};

void _0RL_cd_FF8C1277964B9560_52000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);
  (const org::cfn::scad::core::corba::hardware::FieldDataList&) *arg_2 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_52000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new org::cfn::scad::core::corba::hardware::FieldDataList;
  (org::cfn::scad::core::corba::hardware::FieldDataList&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_52000000::_user_exns[] = {
  org::cfn::scad::core::corba::hardware::ConfigurationException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_52000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::hardware::ConfigurationException::_PD_repoId) ) {
    org::cfn::scad::core::corba::hardware::ConfigurationException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_62000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_52000000* tcd = (_0RL_cd_FF8C1277964B9560_52000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->configure(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
#else
  if (!cd->is_upcall())
    impl->configure(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
  else {
    try {
      impl->configure(tcd->arg_0, tcd->arg_1, *tcd->arg_2);
    }
    catch(org::cfn::scad::core::corba::hardware::ConfigurationException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::hardware::_objref_Node::configure(const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, const FieldDataList& data)
{
  _0RL_cd_FF8C1277964B9560_52000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_62000000, "configure", 10);
  _call_desc.arg_0 = hardwareUniqueID;
  _call_desc.arg_1 = parameterUniqueID;
  _call_desc.arg_2 = &(FieldDataList&) data;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring
class _0RL_cd_FF8C1277964B9560_72000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_72000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
};

void _0RL_cd_FF8C1277964B9560_72000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);

}

void _0RL_cd_FF8C1277964B9560_72000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_82000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_72000000* tcd = (_0RL_cd_FF8C1277964B9560_72000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  impl->shutdown(tcd->arg_0);


}

void org::cfn::scad::core::corba::hardware::_objref_Node::shutdown(const CORBA::WChar* reason)
{
  _0RL_cd_FF8C1277964B9560_72000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_82000000, "shutdown", 9);
  _call_desc.arg_0 = reason;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mExtraLib_i_corg_mcfn_mscad_mcore_mcorba_mutil_mTimeStamp
class _0RL_cd_FF8C1277964B9560_92000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_92000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  org::cfn::scad::core::corba::util::TimeStamp arg_0_;
  const org::cfn::scad::core::corba::util::TimeStamp* arg_0;
  org::cfn::scad::core::corba::hardware::ExtraLib_var result;
};

void _0RL_cd_FF8C1277964B9560_92000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::util::TimeStamp&) *arg_0 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_92000000::unmarshalArguments(cdrStream& _n)
{
  (org::cfn::scad::core::corba::util::TimeStamp&)arg_0_ <<= _n;
  arg_0 = &arg_0_;

}

void _0RL_cd_FF8C1277964B9560_92000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::ExtraLib&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_92000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::hardware::ExtraLib;
  (org::cfn::scad::core::corba::hardware::ExtraLib&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_a2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_92000000* tcd = (_0RL_cd_FF8C1277964B9560_92000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  tcd->result = impl->getExtraLibs(*tcd->arg_0);


}

org::cfn::scad::core::corba::hardware::ExtraLib* org::cfn::scad::core::corba::hardware::_objref_Node::getExtraLibs(const util::TimeStamp& lastDownload)
{
  _0RL_cd_FF8C1277964B9560_92000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_a2000000, "getExtraLibs", 13);
  _call_desc.arg_0 = &(util::TimeStamp&) lastDownload;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mConnectionStatus
class _0RL_cd_FF8C1277964B9560_b2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_b2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  org::cfn::scad::core::corba::hardware::ConnectionStatus result;
};

void _0RL_cd_FF8C1277964B9560_b2000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_b2000000::unmarshalReturnedValues(cdrStream& _n)
{
  (org::cfn::scad::core::corba::hardware::ConnectionStatus&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_c2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_b2000000* tcd = (_0RL_cd_FF8C1277964B9560_b2000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  tcd->result = impl->getConnectionStatus();


}

org::cfn::scad::core::corba::hardware::ConnectionStatus org::cfn::scad::core::corba::hardware::_objref_Node::getConnectionStatus()
{
  _0RL_cd_FF8C1277964B9560_b2000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_c2000000, "getConnectionStatus", 20);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mConnectionStatus
class _0RL_cd_FF8C1277964B9560_d2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_d2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  org::cfn::scad::core::corba::hardware::ConnectionStatus arg_0;
};

void _0RL_cd_FF8C1277964B9560_d2000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_d2000000::unmarshalArguments(cdrStream& _n)
{
  (org::cfn::scad::core::corba::hardware::ConnectionStatus&)arg_0 <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_e2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_d2000000* tcd = (_0RL_cd_FF8C1277964B9560_d2000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  impl->changeConnectionStatus(tcd->arg_0);


}

void org::cfn::scad::core::corba::hardware::_objref_Node::changeConnectionStatus(ConnectionStatus newStatus)
{
  _0RL_cd_FF8C1277964B9560_d2000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_e2000000, "changeConnectionStatus", 23);
  _call_desc.arg_0 = newStatus;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mConnectionStatus_i_cwstring
class _0RL_cd_FF8C1277964B9560_f2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_f2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  org::cfn::scad::core::corba::hardware::ConnectionStatus result;
};

void _0RL_cd_FF8C1277964B9560_f2000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);

}

void _0RL_cd_FF8C1277964B9560_f2000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_FF8C1277964B9560_f2000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_f2000000::unmarshalReturnedValues(cdrStream& _n)
{
  (org::cfn::scad::core::corba::hardware::ConnectionStatus&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_03000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_f2000000* tcd = (_0RL_cd_FF8C1277964B9560_f2000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  tcd->result = impl->getHardwareConnectionStatus(tcd->arg_0);


}

org::cfn::scad::core::corba::hardware::ConnectionStatus org::cfn::scad::core::corba::hardware::_objref_Node::getHardwareConnectionStatus(const CORBA::WChar* hardwareUniqueID)
{
  _0RL_cd_FF8C1277964B9560_f2000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_03000000, "getHardwareConnectionStatus", 28);
  _call_desc.arg_0 = hardwareUniqueID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mConnectionList
class _0RL_cd_FF8C1277964B9560_13000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_13000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  org::cfn::scad::core::corba::hardware::ConnectionList_var result;
};

void _0RL_cd_FF8C1277964B9560_13000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::ConnectionList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_13000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::hardware::ConnectionList;
  (org::cfn::scad::core::corba::hardware::ConnectionList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_23000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_13000000* tcd = (_0RL_cd_FF8C1277964B9560_13000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  tcd->result = impl->getAllHardwareConnectionStatus();


}

org::cfn::scad::core::corba::hardware::ConnectionList* org::cfn::scad::core::corba::hardware::_objref_Node::getAllHardwareConnectionStatus()
{
  _0RL_cd_FF8C1277964B9560_13000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_23000000, "getAllHardwareConnectionStatus", 31);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mConnectionStatus
class _0RL_cd_FF8C1277964B9560_33000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_33000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  org::cfn::scad::core::corba::hardware::ConnectionStatus arg_1;
};

void _0RL_cd_FF8C1277964B9560_33000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_33000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  (org::cfn::scad::core::corba::hardware::ConnectionStatus&)arg_1 <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_43000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_33000000* tcd = (_0RL_cd_FF8C1277964B9560_33000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  impl->changeHardwareConnectionStatus(tcd->arg_0, tcd->arg_1);


}

void org::cfn::scad::core::corba::hardware::_objref_Node::changeHardwareConnectionStatus(const CORBA::WChar* hardwareUniqueID, ConnectionStatus newStatus)
{
  _0RL_cd_FF8C1277964B9560_33000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_43000000, "changeHardwareConnectionStatus", 31);
  _call_desc.arg_0 = hardwareUniqueID;
  _call_desc.arg_1 = newStatus;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mConnectionList_i_cwstring
class _0RL_cd_FF8C1277964B9560_53000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_53000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  org::cfn::scad::core::corba::hardware::ConnectionList_var result;
};

void _0RL_cd_FF8C1277964B9560_53000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);

}

void _0RL_cd_FF8C1277964B9560_53000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_FF8C1277964B9560_53000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::ConnectionList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_53000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::hardware::ConnectionList;
  (org::cfn::scad::core::corba::hardware::ConnectionList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_63000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_53000000* tcd = (_0RL_cd_FF8C1277964B9560_53000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  tcd->result = impl->getAllParametersConnectionStatus(tcd->arg_0);


}

org::cfn::scad::core::corba::hardware::ConnectionList* org::cfn::scad::core::corba::hardware::_objref_Node::getAllParametersConnectionStatus(const CORBA::WChar* hardwareUniqueID)
{
  _0RL_cd_FF8C1277964B9560_53000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_63000000, "getAllParametersConnectionStatus", 33);
  _call_desc.arg_0 = hardwareUniqueID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mConnectionStatus_i_cwstring_i_cwstring
class _0RL_cd_FF8C1277964B9560_73000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_73000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  org::cfn::scad::core::corba::hardware::ConnectionStatus result;
};

void _0RL_cd_FF8C1277964B9560_73000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);

}

void _0RL_cd_FF8C1277964B9560_73000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_FF8C1277964B9560_73000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_73000000::unmarshalReturnedValues(cdrStream& _n)
{
  (org::cfn::scad::core::corba::hardware::ConnectionStatus&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_83000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_73000000* tcd = (_0RL_cd_FF8C1277964B9560_73000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  tcd->result = impl->getParameterConnectionStatus(tcd->arg_0, tcd->arg_1);


}

org::cfn::scad::core::corba::hardware::ConnectionStatus org::cfn::scad::core::corba::hardware::_objref_Node::getParameterConnectionStatus(const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID)
{
  _0RL_cd_FF8C1277964B9560_73000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_83000000, "getParameterConnectionStatus", 29);
  _call_desc.arg_0 = hardwareUniqueID;
  _call_desc.arg_1 = parameterUniqueID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mConnectionStatus
class _0RL_cd_FF8C1277964B9560_93000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_93000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  org::cfn::scad::core::corba::hardware::ConnectionStatus arg_2;
};

void _0RL_cd_FF8C1277964B9560_93000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);
  arg_2 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_93000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  (org::cfn::scad::core::corba::hardware::ConnectionStatus&)arg_2 <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_a3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_93000000* tcd = (_0RL_cd_FF8C1277964B9560_93000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  impl->changeParameterConnectionStatus(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void org::cfn::scad::core::corba::hardware::_objref_Node::changeParameterConnectionStatus(const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, ConnectionStatus newStatus)
{
  _0RL_cd_FF8C1277964B9560_93000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_a3000000, "changeParameterConnectionStatus", 32);
  _call_desc.arg_0 = hardwareUniqueID;
  _call_desc.arg_1 = parameterUniqueID;
  _call_desc.arg_2 = newStatus;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mNodeStatus
class _0RL_cd_FF8C1277964B9560_b3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_b3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  org::cfn::scad::core::corba::hardware::NodeStatus result;
};

void _0RL_cd_FF8C1277964B9560_b3000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_b3000000::unmarshalReturnedValues(cdrStream& _n)
{
  (org::cfn::scad::core::corba::hardware::NodeStatus&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_c3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_b3000000* tcd = (_0RL_cd_FF8C1277964B9560_b3000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  tcd->result = impl->getNodeStatus();


}

org::cfn::scad::core::corba::hardware::NodeStatus org::cfn::scad::core::corba::hardware::_objref_Node::getNodeStatus()
{
  _0RL_cd_FF8C1277964B9560_b3000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_c3000000, "getNodeStatus", 14);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mHardwareStatus_i_cwstring
class _0RL_cd_FF8C1277964B9560_d3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_d3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  org::cfn::scad::core::corba::hardware::HardwareStatus result;
};

void _0RL_cd_FF8C1277964B9560_d3000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);

}

void _0RL_cd_FF8C1277964B9560_d3000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_FF8C1277964B9560_d3000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_d3000000::unmarshalReturnedValues(cdrStream& _n)
{
  (org::cfn::scad::core::corba::hardware::HardwareStatus&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_e3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_d3000000* tcd = (_0RL_cd_FF8C1277964B9560_d3000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  tcd->result = impl->getHardwareStatus(tcd->arg_0);


}

org::cfn::scad::core::corba::hardware::HardwareStatus org::cfn::scad::core::corba::hardware::_objref_Node::getHardwareStatus(const CORBA::WChar* hardwareUniqueID)
{
  _0RL_cd_FF8C1277964B9560_d3000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_e3000000, "getHardwareStatus", 18);
  _call_desc.arg_0 = hardwareUniqueID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mHardwareStatusList
class _0RL_cd_FF8C1277964B9560_f3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_f3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  org::cfn::scad::core::corba::hardware::HardwareStatusList_var result;
};

void _0RL_cd_FF8C1277964B9560_f3000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::HardwareStatusList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_f3000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::hardware::HardwareStatusList;
  (org::cfn::scad::core::corba::hardware::HardwareStatusList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_04000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_f3000000* tcd = (_0RL_cd_FF8C1277964B9560_f3000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  tcd->result = impl->getAllHardwareStatus();


}

org::cfn::scad::core::corba::hardware::HardwareStatusList* org::cfn::scad::core::corba::hardware::_objref_Node::getAllHardwareStatus()
{
  _0RL_cd_FF8C1277964B9560_f3000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_04000000, "getAllHardwareStatus", 21);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mHardwareStatus
class _0RL_cd_FF8C1277964B9560_14000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_14000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  org::cfn::scad::core::corba::hardware::HardwareStatus arg_1;
};

void _0RL_cd_FF8C1277964B9560_14000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_14000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  (org::cfn::scad::core::corba::hardware::HardwareStatus&)arg_1 <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_24000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_14000000* tcd = (_0RL_cd_FF8C1277964B9560_14000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  impl->changeHardwareStatus(tcd->arg_0, tcd->arg_1);


}

void org::cfn::scad::core::corba::hardware::_objref_Node::changeHardwareStatus(const CORBA::WChar* hardwareUniqueID, HardwareStatus newStatus)
{
  _0RL_cd_FF8C1277964B9560_14000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_24000000, "changeHardwareStatus", 21);
  _call_desc.arg_0 = hardwareUniqueID;
  _call_desc.arg_1 = newStatus;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mHardwareStatus
class _0RL_cd_FF8C1277964B9560_34000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_34000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  org::cfn::scad::core::corba::hardware::HardwareStatus arg_0;
};

void _0RL_cd_FF8C1277964B9560_34000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_34000000::unmarshalArguments(cdrStream& _n)
{
  (org::cfn::scad::core::corba::hardware::HardwareStatus&)arg_0 <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_44000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_34000000* tcd = (_0RL_cd_FF8C1277964B9560_34000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  impl->changeAllHardwareStatus(tcd->arg_0);


}

void org::cfn::scad::core::corba::hardware::_objref_Node::changeAllHardwareStatus(HardwareStatus newStatus)
{
  _0RL_cd_FF8C1277964B9560_34000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_44000000, "changeAllHardwareStatus", 24);
  _call_desc.arg_0 = newStatus;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_54000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_a0000000* tcd = (_0RL_cd_FF8C1277964B9560_a0000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  impl->setEventTable(*tcd->arg_0);


}

void org::cfn::scad::core::corba::hardware::_objref_Node::setEventTable(const EventList& evtList)
{
  _0RL_cd_FF8C1277964B9560_a0000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_54000000, "setEventTable", 14);
  _call_desc.arg_0 = &(EventList&) evtList;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mTransferFunction_i_cwstring_i_cwstring
class _0RL_cd_FF8C1277964B9560_64000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_64000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  org::cfn::scad::core::corba::hardware::TransferFunction_var result;
};

void _0RL_cd_FF8C1277964B9560_64000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);

}

void _0RL_cd_FF8C1277964B9560_64000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_FF8C1277964B9560_64000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::TransferFunction&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_64000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::hardware::TransferFunction;
  (org::cfn::scad::core::corba::hardware::TransferFunction&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_74000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_64000000* tcd = (_0RL_cd_FF8C1277964B9560_64000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  tcd->result = impl->getTransferFunction(tcd->arg_0, tcd->arg_1);


}

org::cfn::scad::core::corba::hardware::TransferFunction* org::cfn::scad::core::corba::hardware::_objref_Node::getTransferFunction(const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID)
{
  _0RL_cd_FF8C1277964B9560_64000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_74000000, "getTransferFunction", 20);
  _call_desc.arg_0 = hardwareUniqueID;
  _call_desc.arg_1 = parameterUniqueID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mTransferFunction
class _0RL_cd_FF8C1277964B9560_84000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_84000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  org::cfn::scad::core::corba::hardware::TransferFunction_var arg_2_;
  const org::cfn::scad::core::corba::hardware::TransferFunction* arg_2;
};

void _0RL_cd_FF8C1277964B9560_84000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);
  (const org::cfn::scad::core::corba::hardware::TransferFunction&) *arg_2 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_84000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new org::cfn::scad::core::corba::hardware::TransferFunction;
  (org::cfn::scad::core::corba::hardware::TransferFunction&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_94000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_84000000* tcd = (_0RL_cd_FF8C1277964B9560_84000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  impl->setTransferFunction(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void org::cfn::scad::core::corba::hardware::_objref_Node::setTransferFunction(const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, const TransferFunction& tf)
{
  _0RL_cd_FF8C1277964B9560_84000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_94000000, "setTransferFunction", 20);
  _call_desc.arg_0 = hardwareUniqueID;
  _call_desc.arg_1 = parameterUniqueID;
  _call_desc.arg_2 = &(TransferFunction&) tf;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring_i_cwstring_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mEventList_i_corg_mcfn_mscad_mcore_mcorba_mutil_mTimeStamp_i_corg_mcfn_mscad_mcore_mcorba_mutil_mTimeStamp
class _0RL_cd_FF8C1277964B9560_a4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_a4000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  org::cfn::scad::core::corba::hardware::EventList_var arg_3_;
  const org::cfn::scad::core::corba::hardware::EventList* arg_3;
  org::cfn::scad::core::corba::util::TimeStamp arg_4_;
  const org::cfn::scad::core::corba::util::TimeStamp* arg_4;
  org::cfn::scad::core::corba::util::TimeStamp arg_5_;
  const org::cfn::scad::core::corba::util::TimeStamp* arg_5;
};

void _0RL_cd_FF8C1277964B9560_a4000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);
  (const org::cfn::scad::core::corba::hardware::EventList&) *arg_3 >>= _n;
  (const org::cfn::scad::core::corba::util::TimeStamp&) *arg_4 >>= _n;
  (const org::cfn::scad::core::corba::util::TimeStamp&) *arg_5 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_a4000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();
  arg_3_ = new org::cfn::scad::core::corba::hardware::EventList;
  (org::cfn::scad::core::corba::hardware::EventList&)arg_3_ <<= _n;
  arg_3 = &arg_3_.in();
  (org::cfn::scad::core::corba::util::TimeStamp&)arg_4_ <<= _n;
  arg_4 = &arg_4_;
  (org::cfn::scad::core::corba::util::TimeStamp&)arg_5_ <<= _n;
  arg_5 = &arg_5_;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_b4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_a4000000* tcd = (_0RL_cd_FF8C1277964B9560_a4000000*)cd;
  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  impl->newDataAvailable(tcd->arg_0, tcd->arg_1, tcd->arg_2, *tcd->arg_3, *tcd->arg_4, *tcd->arg_5);


}

void org::cfn::scad::core::corba::hardware::_objref_Node::newDataAvailable(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, const EventList& eList, const util::TimeStamp& tstart, const util::TimeStamp& tend)
{
  _0RL_cd_FF8C1277964B9560_a4000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_b4000000, "newDataAvailable", 17);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = parameterUniqueID;
  _call_desc.arg_3 = &(EventList&) eList;
  _call_desc.arg_4 = &(util::TimeStamp&) tstart;
  _call_desc.arg_5 = &(util::TimeStamp&) tend;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_c4000000(omniCallDescriptor* cd, omniServant* svnt)
{

  org::cfn::scad::core::corba::hardware::_impl_Node* impl = (org::cfn::scad::core::corba::hardware::_impl_Node*) svnt->_ptrToInterface(org::cfn::scad::core::corba::hardware::Node::_PD_repoId);
  impl->abort();


}

void org::cfn::scad::core::corba::hardware::_objref_Node::abort()
{
  _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_c4000000, "abort", 6);


  _invoke(_call_desc);



}
org::cfn::scad::core::corba::hardware::_pof_Node::~_pof_Node() {}


omniObjRef*
org::cfn::scad::core::corba::hardware::_pof_Node::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::org::cfn::scad::core::corba::hardware::_objref_Node(ior, id);
}


CORBA::Boolean
org::cfn::scad::core::corba::hardware::_pof_Node::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::org::cfn::scad::core::corba::hardware::Node::_PD_repoId) )
    return 1;

  return 0;
}

const org::cfn::scad::core::corba::hardware::_pof_Node _the_pof_org_mcfn_mscad_mcore_mcorba_mhardware_mNode;

org::cfn::scad::core::corba::hardware::_impl_Node::~_impl_Node() {}


CORBA::Boolean
org::cfn::scad::core::corba::hardware::_impl_Node::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "getNodeInfo") ) {

    _0RL_cd_FF8C1277964B9560_b1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_c1000000, "getNodeInfo", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getHardwareInfos") ) {

    _0RL_cd_FF8C1277964B9560_d1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_e1000000, "getHardwareInfos", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "ping") ) {

    _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_02000000, "ping", 5, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getParameterValue") ) {

    _0RL_cd_FF8C1277964B9560_12000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_22000000, "getParameterValue", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getParameterValues") ) {

    _0RL_cd_FF8C1277964B9560_32000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_42000000, "getParameterValues", 19, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "configure") ) {

    _0RL_cd_FF8C1277964B9560_52000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_62000000, "configure", 10, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "shutdown") ) {

    _0RL_cd_FF8C1277964B9560_72000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_82000000, "shutdown", 9, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getExtraLibs") ) {

    _0RL_cd_FF8C1277964B9560_92000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_a2000000, "getExtraLibs", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getConnectionStatus") ) {

    _0RL_cd_FF8C1277964B9560_b2000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_c2000000, "getConnectionStatus", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "changeConnectionStatus") ) {

    _0RL_cd_FF8C1277964B9560_d2000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_e2000000, "changeConnectionStatus", 23, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getHardwareConnectionStatus") ) {

    _0RL_cd_FF8C1277964B9560_f2000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_03000000, "getHardwareConnectionStatus", 28, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAllHardwareConnectionStatus") ) {

    _0RL_cd_FF8C1277964B9560_13000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_23000000, "getAllHardwareConnectionStatus", 31, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "changeHardwareConnectionStatus") ) {

    _0RL_cd_FF8C1277964B9560_33000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_43000000, "changeHardwareConnectionStatus", 31, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAllParametersConnectionStatus") ) {

    _0RL_cd_FF8C1277964B9560_53000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_63000000, "getAllParametersConnectionStatus", 33, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getParameterConnectionStatus") ) {

    _0RL_cd_FF8C1277964B9560_73000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_83000000, "getParameterConnectionStatus", 29, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "changeParameterConnectionStatus") ) {

    _0RL_cd_FF8C1277964B9560_93000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_a3000000, "changeParameterConnectionStatus", 32, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getNodeStatus") ) {

    _0RL_cd_FF8C1277964B9560_b3000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_c3000000, "getNodeStatus", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getHardwareStatus") ) {

    _0RL_cd_FF8C1277964B9560_d3000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_e3000000, "getHardwareStatus", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAllHardwareStatus") ) {

    _0RL_cd_FF8C1277964B9560_f3000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_04000000, "getAllHardwareStatus", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "changeHardwareStatus") ) {

    _0RL_cd_FF8C1277964B9560_14000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_24000000, "changeHardwareStatus", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "changeAllHardwareStatus") ) {

    _0RL_cd_FF8C1277964B9560_34000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_44000000, "changeAllHardwareStatus", 24, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setEventTable") ) {

    _0RL_cd_FF8C1277964B9560_a0000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_54000000, "setEventTable", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getTransferFunction") ) {

    _0RL_cd_FF8C1277964B9560_64000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_74000000, "getTransferFunction", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setTransferFunction") ) {

    _0RL_cd_FF8C1277964B9560_84000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_94000000, "setTransferFunction", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "newDataAvailable") ) {

    _0RL_cd_FF8C1277964B9560_a4000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_b4000000, "newDataAvailable", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "abort") ) {

    _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_c4000000, "abort", 6, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
org::cfn::scad::core::corba::hardware::_impl_Node::_ptrToInterface(const char* id)
{
  if( id == ::org::cfn::scad::core::corba::hardware::Node::_PD_repoId )
    return (::org::cfn::scad::core::corba::hardware::_impl_Node*) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::org::cfn::scad::core::corba::hardware::Node::_PD_repoId) )
    return (::org::cfn::scad::core::corba::hardware::_impl_Node*) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
org::cfn::scad::core::corba::hardware::_impl_Node::_mostDerivedRepoId()
{
  return ::org::cfn::scad::core::corba::hardware::Node::_PD_repoId;
}

void
org::cfn::scad::core::corba::clients::ProfileElement::operator>>= (cdrStream &_n) const
{
  _n.marshalWString(nodeUniqueID,0);
  _n.marshalWString(hardwareUniqueID,0);
  _n.marshalWString(parameterUniqueID,0);

}

void
org::cfn::scad::core::corba::clients::ProfileElement::operator<<= (cdrStream &_n)
{
  nodeUniqueID = _n.unmarshalWString(0);
  hardwareUniqueID = _n.unmarshalWString(0);
  parameterUniqueID = _n.unmarshalWString(0);

}

void
org::cfn::scad::core::corba::clients::Profile::operator>>= (cdrStream &_n) const
{
  _n.marshalWString(owner,0);
  _n.marshalWString(name,0);
  (const ProfileElementList&) elements >>= _n;
  _n.marshalBoolean(public_access);

}

void
org::cfn::scad::core::corba::clients::Profile::operator<<= (cdrStream &_n)
{
  owner = _n.unmarshalWString(0);
  name = _n.unmarshalWString(0);
  (ProfileElementList&)elements <<= _n;
  public_access = _n.unmarshalBoolean();

}

org::cfn::scad::core::corba::clients::Client_ptr org::cfn::scad::core::corba::clients::Client_Helper::_nil() {
  return ::org::cfn::scad::core::corba::clients::Client::_nil();
}

CORBA::Boolean org::cfn::scad::core::corba::clients::Client_Helper::is_nil(::org::cfn::scad::core::corba::clients::Client_ptr p) {
  return CORBA::is_nil(p);

}

void org::cfn::scad::core::corba::clients::Client_Helper::release(::org::cfn::scad::core::corba::clients::Client_ptr p) {
  CORBA::release(p);
}

void org::cfn::scad::core::corba::clients::Client_Helper::marshalObjRef(::org::cfn::scad::core::corba::clients::Client_ptr obj, cdrStream& s) {
  ::org::cfn::scad::core::corba::clients::Client::_marshalObjRef(obj, s);
}

org::cfn::scad::core::corba::clients::Client_ptr org::cfn::scad::core::corba::clients::Client_Helper::unmarshalObjRef(cdrStream& s) {
  return ::org::cfn::scad::core::corba::clients::Client::_unmarshalObjRef(s);
}

void org::cfn::scad::core::corba::clients::Client_Helper::duplicate(::org::cfn::scad::core::corba::clients::Client_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

org::cfn::scad::core::corba::clients::Client_ptr
org::cfn::scad::core::corba::clients::Client::_duplicate(::org::cfn::scad::core::corba::clients::Client_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

org::cfn::scad::core::corba::clients::Client_ptr
org::cfn::scad::core::corba::clients::Client::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


org::cfn::scad::core::corba::clients::Client_ptr
org::cfn::scad::core::corba::clients::Client::_unchecked_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

org::cfn::scad::core::corba::clients::Client_ptr
org::cfn::scad::core::corba::clients::Client::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Client _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Client* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Client;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* org::cfn::scad::core::corba::clients::Client::_PD_repoId = "IDL:org/cfn/scad/core/corba/clients/Client:1.0";


org::cfn::scad::core::corba::clients::_objref_Client::~_objref_Client() {

}


org::cfn::scad::core::corba::clients::_objref_Client::_objref_Client(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::org::cfn::scad::core::corba::clients::Client::_PD_repoId, ior, id, 1)


{
  _PR_setobj(this);
}

void*
org::cfn::scad::core::corba::clients::_objref_Client::_ptrToObjRef(const char* id)
{
  if( id == ::org::cfn::scad::core::corba::clients::Client::_PD_repoId )
    return (::org::cfn::scad::core::corba::clients::Client_ptr) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::org::cfn::scad::core::corba::clients::Client::_PD_repoId) )
    return (::org::cfn::scad::core::corba::clients::Client_ptr) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_d4000000(omniCallDescriptor* cd, omniServant* svnt)
{

  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->ping();


}

void org::cfn::scad::core::corba::clients::_objref_Client::ping()
{
  _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_d4000000, "ping", 5);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mclients_mUser
class _0RL_cd_FF8C1277964B9560_e4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_e4000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  org::cfn::scad::core::corba::clients::User_var result;
};

void _0RL_cd_FF8C1277964B9560_e4000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_e4000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_f4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_e4000000* tcd = (_0RL_cd_FF8C1277964B9560_e4000000*)cd;
  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  tcd->result = impl->getUser();


}

org::cfn::scad::core::corba::clients::User* org::cfn::scad::core::corba::clients::_objref_Client::getUser()
{
  _0RL_cd_FF8C1277964B9560_e4000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_f4000000, "getUser", 8);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser
class _0RL_cd_FF8C1277964B9560_05000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_05000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
};

void _0RL_cd_FF8C1277964B9560_05000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_05000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_15000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_05000000* tcd = (_0RL_cd_FF8C1277964B9560_05000000*)cd;
  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->setUser(*tcd->arg_0);


}

void org::cfn::scad::core::corba::clients::_objref_Client::setUser(const User& usr)
{
  _0RL_cd_FF8C1277964B9560_05000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_15000000, "setUser", 8);
  _call_desc.arg_0 = &(User&) usr;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_25000000(omniCallDescriptor* cd, omniServant* svnt)
{

  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->usersListChanged();


}

void org::cfn::scad::core::corba::clients::_objref_Client::usersListChanged()
{
  _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_25000000, "usersListChanged", 17);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_35000000(omniCallDescriptor* cd, omniServant* svnt)
{

  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->nodeListChanged();


}

void org::cfn::scad::core::corba::clients::_objref_Client::nodeListChanged()
{
  _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_35000000, "nodeListChanged", 16);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_45000000(omniCallDescriptor* cd, omniServant* svnt)
{

  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->hardwareLockStatusChanged();


}

void org::cfn::scad::core::corba::clients::_objref_Client::hardwareLockStatusChanged()
{
  _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_45000000, "hardwareLockStatusChanged", 26);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_55000000(omniCallDescriptor* cd, omniServant* svnt)
{

  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->eventEditLockStatusChanged();


}

void org::cfn::scad::core::corba::clients::_objref_Client::eventEditLockStatusChanged()
{
  _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_55000000, "eventEditLockStatusChanged", 27);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_cwstring_i_cwstring_i_cwstring
class _0RL_cd_FF8C1277964B9560_65000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_65000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  CORBA::WString_var arg_3_;
  const CORBA::WChar* arg_3;
};

void _0RL_cd_FF8C1277964B9560_65000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);
  _n.marshalWString(arg_3,0);

}

void _0RL_cd_FF8C1277964B9560_65000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();
  arg_3_ = _n.unmarshalWString(0);
  arg_3 = arg_3_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_75000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_65000000* tcd = (_0RL_cd_FF8C1277964B9560_65000000*)cd;
  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->requireLock(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);


}

void org::cfn::scad::core::corba::clients::_objref_Client::requireLock(const User& usr, const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* reason)
{
  _0RL_cd_FF8C1277964B9560_65000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_75000000, "requireLock", 12);
  _call_desc.arg_0 = &(User&) usr;
  _call_desc.arg_1 = nodeUniqueID;
  _call_desc.arg_2 = hardwareUniqueID;
  _call_desc.arg_3 = reason;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_85000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_72000000* tcd = (_0RL_cd_FF8C1277964B9560_72000000*)cd;
  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->newMessage(tcd->arg_0);


}

void org::cfn::scad::core::corba::clients::_objref_Client::newMessage(const CORBA::WChar* message)
{
  _0RL_cd_FF8C1277964B9560_72000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_85000000, "newMessage", 11);
  _call_desc.arg_0 = message;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_95000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_20000000* tcd = (_0RL_cd_FF8C1277964B9560_20000000*)cd;
  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->connectionStatusChanged(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void org::cfn::scad::core::corba::clients::_objref_Client::connectionStatusChanged(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID)
{
  _0RL_cd_FF8C1277964B9560_20000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_95000000, "connectionStatusChanged", 24);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = parameterUniqueID;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mHardwareStatus
class _0RL_cd_FF8C1277964B9560_a5000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_a5000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  org::cfn::scad::core::corba::hardware::HardwareStatus arg_2;
};

void _0RL_cd_FF8C1277964B9560_a5000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);
  arg_2 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_a5000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  (org::cfn::scad::core::corba::hardware::HardwareStatus&)arg_2 <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_b5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_a5000000* tcd = (_0RL_cd_FF8C1277964B9560_a5000000*)cd;
  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->hardwareStatusChange(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void org::cfn::scad::core::corba::clients::_objref_Client::hardwareStatusChange(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, hardware::HardwareStatus newStatus)
{
  _0RL_cd_FF8C1277964B9560_a5000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_b5000000, "hardwareStatusChange", 21);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = newStatus;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mNodeStatus
class _0RL_cd_FF8C1277964B9560_c5000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_c5000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  org::cfn::scad::core::corba::hardware::NodeStatus arg_1;
};

void _0RL_cd_FF8C1277964B9560_c5000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_c5000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  (org::cfn::scad::core::corba::hardware::NodeStatus&)arg_1 <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_d5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_c5000000* tcd = (_0RL_cd_FF8C1277964B9560_c5000000*)cd;
  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->nodeStatusChange(tcd->arg_0, tcd->arg_1);


}

void org::cfn::scad::core::corba::clients::_objref_Client::nodeStatusChange(const CORBA::WChar* nodeUniqueID, hardware::NodeStatus newStatus)
{
  _0RL_cd_FF8C1277964B9560_c5000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_d5000000, "nodeStatusChange", 17);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = newStatus;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_e5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_72000000* tcd = (_0RL_cd_FF8C1277964B9560_72000000*)cd;
  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->hardwareListChanged(tcd->arg_0);


}

void org::cfn::scad::core::corba::clients::_objref_Client::hardwareListChanged(const CORBA::WChar* nodeUniqueID)
{
  _0RL_cd_FF8C1277964B9560_72000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_e5000000, "hardwareListChanged", 20);
  _call_desc.arg_0 = nodeUniqueID;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_f5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_a4000000* tcd = (_0RL_cd_FF8C1277964B9560_a4000000*)cd;
  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->newDataAvailable(tcd->arg_0, tcd->arg_1, tcd->arg_2, *tcd->arg_3, *tcd->arg_4, *tcd->arg_5);


}

void org::cfn::scad::core::corba::clients::_objref_Client::newDataAvailable(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, const hardware::EventList& eList, const util::TimeStamp& tstart, const util::TimeStamp& tend)
{
  _0RL_cd_FF8C1277964B9560_a4000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_f5000000, "newDataAvailable", 17);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = parameterUniqueID;
  _call_desc.arg_3 = &(hardware::EventList&) eList;
  _call_desc.arg_4 = &(util::TimeStamp&) tstart;
  _call_desc.arg_5 = &(util::TimeStamp&) tend;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_06000000(omniCallDescriptor* cd, omniServant* svnt)
{

  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->newPluginXMLAvailable();


}

void org::cfn::scad::core::corba::clients::_objref_Client::newPluginXMLAvailable()
{
  _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_06000000, "newPluginXMLAvailable", 22);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring_i_cwstring_i_cboolean
class _0RL_cd_FF8C1277964B9560_16000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_16000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::Boolean arg_2;
};

void _0RL_cd_FF8C1277964B9560_16000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);
  _n.marshalBoolean(arg_2);

}

void _0RL_cd_FF8C1277964B9560_16000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2 = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_26000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_16000000* tcd = (_0RL_cd_FF8C1277964B9560_16000000*)cd;
  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->userPropertyChanged(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void org::cfn::scad::core::corba::clients::_objref_Client::userPropertyChanged(const CORBA::WChar* username, const CORBA::WChar* propName, CORBA::Boolean propValue)
{
  _0RL_cd_FF8C1277964B9560_16000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_26000000, "userPropertyChanged", 20);
  _call_desc.arg_0 = username;
  _call_desc.arg_1 = propName;
  _call_desc.arg_2 = propValue;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring_i_cwstring_i_cwstring_i_cwstring_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mutil_mTimeStamp_i_corg_mcfn_mscad_mcore_mcorba_mutil_mTimeStamp
class _0RL_cd_FF8C1277964B9560_36000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_36000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  CORBA::WString_var arg_3_;
  const CORBA::WChar* arg_3;
  CORBA::WString_var arg_4_;
  const CORBA::WChar* arg_4;
  org::cfn::scad::core::corba::util::TimeStamp arg_5_;
  const org::cfn::scad::core::corba::util::TimeStamp* arg_5;
  org::cfn::scad::core::corba::util::TimeStamp arg_6_;
  const org::cfn::scad::core::corba::util::TimeStamp* arg_6;
};

void _0RL_cd_FF8C1277964B9560_36000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);
  _n.marshalWString(arg_3,0);
  _n.marshalWString(arg_4,0);
  (const org::cfn::scad::core::corba::util::TimeStamp&) *arg_5 >>= _n;
  (const org::cfn::scad::core::corba::util::TimeStamp&) *arg_6 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_36000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();
  arg_3_ = _n.unmarshalWString(0);
  arg_3 = arg_3_.in();
  arg_4_ = _n.unmarshalWString(0);
  arg_4 = arg_4_.in();
  (org::cfn::scad::core::corba::util::TimeStamp&)arg_5_ <<= _n;
  arg_5 = &arg_5_;
  (org::cfn::scad::core::corba::util::TimeStamp&)arg_6_ <<= _n;
  arg_6 = &arg_6_;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_46000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_36000000* tcd = (_0RL_cd_FF8C1277964B9560_36000000*)cd;
  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->shareData(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, *tcd->arg_5, *tcd->arg_6);


}

void org::cfn::scad::core::corba::clients::_objref_Client::shareData(const CORBA::WChar* userFrom, const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, const CORBA::WChar* pluginclasslocin, const util::TimeStamp& tstart, const util::TimeStamp& tend)
{
  _0RL_cd_FF8C1277964B9560_36000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_46000000, "shareData", 10);
  _call_desc.arg_0 = userFrom;
  _call_desc.arg_1 = nodeUniqueID;
  _call_desc.arg_2 = hardwareUniqueID;
  _call_desc.arg_3 = parameterUniqueID;
  _call_desc.arg_4 = pluginclasslocin;
  _call_desc.arg_5 = &(util::TimeStamp&) tstart;
  _call_desc.arg_6 = &(util::TimeStamp&) tend;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_56000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_01000000* tcd = (_0RL_cd_FF8C1277964B9560_01000000*)cd;
  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->nameChanged(*tcd->arg_0);


}

void org::cfn::scad::core::corba::clients::_objref_Client::nameChanged(const hardware::NameInfo& ninfo)
{
  _0RL_cd_FF8C1277964B9560_01000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_56000000, "nameChanged", 12);
  _call_desc.arg_0 = &(hardware::NameInfo&) ninfo;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_66000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_a0000000* tcd = (_0RL_cd_FF8C1277964B9560_a0000000*)cd;
  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->newEventListAvailable(*tcd->arg_0);


}

void org::cfn::scad::core::corba::clients::_objref_Client::newEventListAvailable(const hardware::EventList& evtList)
{
  _0RL_cd_FF8C1277964B9560_a0000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_66000000, "newEventListAvailable", 22);
  _call_desc.arg_0 = &(hardware::EventList&) evtList;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_76000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_40000000* tcd = (_0RL_cd_FF8C1277964B9560_40000000*)cd;
  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->kick(tcd->arg_0, tcd->arg_1);


}

void org::cfn::scad::core::corba::clients::_objref_Client::kick(const CORBA::WChar* adminUsername, const CORBA::WChar* reason)
{
  _0RL_cd_FF8C1277964B9560_40000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_76000000, "kick", 5);
  _call_desc.arg_0 = adminUsername;
  _call_desc.arg_1 = reason;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_86000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_61000000* tcd = (_0RL_cd_FF8C1277964B9560_61000000*)cd;
  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->commentAdded(*tcd->arg_0);


}

void org::cfn::scad::core::corba::clients::_objref_Client::commentAdded(const util::Comment& c)
{
  _0RL_cd_FF8C1277964B9560_61000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_86000000, "commentAdded", 13);
  _call_desc.arg_0 = &(util::Comment&) c;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_96000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_81000000* tcd = (_0RL_cd_FF8C1277964B9560_81000000*)cd;
  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->commentEdited(*tcd->arg_0, *tcd->arg_1);


}

void org::cfn::scad::core::corba::clients::_objref_Client::commentEdited(const util::Comment& oldComment, const util::Comment& newComment)
{
  _0RL_cd_FF8C1277964B9560_81000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_96000000, "commentEdited", 14);
  _call_desc.arg_0 = &(util::Comment&) oldComment;
  _call_desc.arg_1 = &(util::Comment&) newComment;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_a6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_61000000* tcd = (_0RL_cd_FF8C1277964B9560_61000000*)cd;
  org::cfn::scad::core::corba::clients::_impl_Client* impl = (org::cfn::scad::core::corba::clients::_impl_Client*) svnt->_ptrToInterface(org::cfn::scad::core::corba::clients::Client::_PD_repoId);
  impl->commentRemoved(*tcd->arg_0);


}

void org::cfn::scad::core::corba::clients::_objref_Client::commentRemoved(const util::Comment& c)
{
  _0RL_cd_FF8C1277964B9560_61000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_a6000000, "commentRemoved", 15);
  _call_desc.arg_0 = &(util::Comment&) c;

  _invoke(_call_desc);



}
org::cfn::scad::core::corba::clients::_pof_Client::~_pof_Client() {}


omniObjRef*
org::cfn::scad::core::corba::clients::_pof_Client::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::org::cfn::scad::core::corba::clients::_objref_Client(ior, id);
}


CORBA::Boolean
org::cfn::scad::core::corba::clients::_pof_Client::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::org::cfn::scad::core::corba::clients::Client::_PD_repoId) )
    return 1;

  return 0;
}

const org::cfn::scad::core::corba::clients::_pof_Client _the_pof_org_mcfn_mscad_mcore_mcorba_mclients_mClient;

org::cfn::scad::core::corba::clients::_impl_Client::~_impl_Client() {}


CORBA::Boolean
org::cfn::scad::core::corba::clients::_impl_Client::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "ping") ) {

    _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_d4000000, "ping", 5, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getUser") ) {

    _0RL_cd_FF8C1277964B9560_e4000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_f4000000, "getUser", 8, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setUser") ) {

    _0RL_cd_FF8C1277964B9560_05000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_15000000, "setUser", 8, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "usersListChanged") ) {

    _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_25000000, "usersListChanged", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "nodeListChanged") ) {

    _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_35000000, "nodeListChanged", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "hardwareLockStatusChanged") ) {

    _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_45000000, "hardwareLockStatusChanged", 26, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "eventEditLockStatusChanged") ) {

    _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_55000000, "eventEditLockStatusChanged", 27, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "requireLock") ) {

    _0RL_cd_FF8C1277964B9560_65000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_75000000, "requireLock", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "newMessage") ) {

    _0RL_cd_FF8C1277964B9560_72000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_85000000, "newMessage", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "connectionStatusChanged") ) {

    _0RL_cd_FF8C1277964B9560_20000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_95000000, "connectionStatusChanged", 24, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "hardwareStatusChange") ) {

    _0RL_cd_FF8C1277964B9560_a5000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_b5000000, "hardwareStatusChange", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "nodeStatusChange") ) {

    _0RL_cd_FF8C1277964B9560_c5000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_d5000000, "nodeStatusChange", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "hardwareListChanged") ) {

    _0RL_cd_FF8C1277964B9560_72000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_e5000000, "hardwareListChanged", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "newDataAvailable") ) {

    _0RL_cd_FF8C1277964B9560_a4000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_f5000000, "newDataAvailable", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "newPluginXMLAvailable") ) {

    _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_06000000, "newPluginXMLAvailable", 22, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "userPropertyChanged") ) {

    _0RL_cd_FF8C1277964B9560_16000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_26000000, "userPropertyChanged", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "shareData") ) {

    _0RL_cd_FF8C1277964B9560_36000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_46000000, "shareData", 10, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "nameChanged") ) {

    _0RL_cd_FF8C1277964B9560_01000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_56000000, "nameChanged", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "newEventListAvailable") ) {

    _0RL_cd_FF8C1277964B9560_a0000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_66000000, "newEventListAvailable", 22, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "kick") ) {

    _0RL_cd_FF8C1277964B9560_40000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_76000000, "kick", 5, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "commentAdded") ) {

    _0RL_cd_FF8C1277964B9560_61000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_86000000, "commentAdded", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "commentEdited") ) {

    _0RL_cd_FF8C1277964B9560_81000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_96000000, "commentEdited", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "commentRemoved") ) {

    _0RL_cd_FF8C1277964B9560_61000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_a6000000, "commentRemoved", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
org::cfn::scad::core::corba::clients::_impl_Client::_ptrToInterface(const char* id)
{
  if( id == ::org::cfn::scad::core::corba::clients::Client::_PD_repoId )
    return (::org::cfn::scad::core::corba::clients::_impl_Client*) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::org::cfn::scad::core::corba::clients::Client::_PD_repoId) )
    return (::org::cfn::scad::core::corba::clients::_impl_Client*) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
org::cfn::scad::core::corba::clients::_impl_Client::_mostDerivedRepoId()
{
  return ::org::cfn::scad::core::corba::clients::Client::_PD_repoId;
}

org::cfn::scad::core::corba::server::CentralServer_ptr org::cfn::scad::core::corba::server::CentralServer_Helper::_nil() {
  return ::org::cfn::scad::core::corba::server::CentralServer::_nil();
}

CORBA::Boolean org::cfn::scad::core::corba::server::CentralServer_Helper::is_nil(::org::cfn::scad::core::corba::server::CentralServer_ptr p) {
  return CORBA::is_nil(p);

}

void org::cfn::scad::core::corba::server::CentralServer_Helper::release(::org::cfn::scad::core::corba::server::CentralServer_ptr p) {
  CORBA::release(p);
}

void org::cfn::scad::core::corba::server::CentralServer_Helper::marshalObjRef(::org::cfn::scad::core::corba::server::CentralServer_ptr obj, cdrStream& s) {
  ::org::cfn::scad::core::corba::server::CentralServer::_marshalObjRef(obj, s);
}

org::cfn::scad::core::corba::server::CentralServer_ptr org::cfn::scad::core::corba::server::CentralServer_Helper::unmarshalObjRef(cdrStream& s) {
  return ::org::cfn::scad::core::corba::server::CentralServer::_unmarshalObjRef(s);
}

void org::cfn::scad::core::corba::server::CentralServer_Helper::duplicate(::org::cfn::scad::core::corba::server::CentralServer_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

org::cfn::scad::core::corba::server::CentralServer_ptr
org::cfn::scad::core::corba::server::CentralServer::_duplicate(::org::cfn::scad::core::corba::server::CentralServer_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

org::cfn::scad::core::corba::server::CentralServer_ptr
org::cfn::scad::core::corba::server::CentralServer::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


org::cfn::scad::core::corba::server::CentralServer_ptr
org::cfn::scad::core::corba::server::CentralServer::_unchecked_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

org::cfn::scad::core::corba::server::CentralServer_ptr
org::cfn::scad::core::corba::server::CentralServer::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_CentralServer _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_CentralServer* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_CentralServer;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* org::cfn::scad::core::corba::server::CentralServer::_PD_repoId = "IDL:org/cfn/scad/core/corba/server/CentralServer:1.0";


org::cfn::scad::core::corba::server::_objref_CentralServer::~_objref_CentralServer() {

}


org::cfn::scad::core::corba::server::_objref_CentralServer::_objref_CentralServer(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::org::cfn::scad::core::corba::server::CentralServer::_PD_repoId, ior, id, 1)


{
  _PR_setobj(this);
}

void*
org::cfn::scad::core::corba::server::_objref_CentralServer::_ptrToObjRef(const char* id)
{
  if( id == ::org::cfn::scad::core::corba::server::CentralServer::_PD_repoId )
    return (::org::cfn::scad::core::corba::server::CentralServer_ptr) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::org::cfn::scad::core::corba::server::CentralServer::_PD_repoId) )
    return (::org::cfn::scad::core::corba::server::CentralServer_ptr) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mHardwareLockList
class _0RL_cd_FF8C1277964B9560_b6000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_b6000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  org::cfn::scad::core::corba::hardware::HardwareLockList_var result;
};

void _0RL_cd_FF8C1277964B9560_b6000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::HardwareLockList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_b6000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::hardware::HardwareLockList;
  (org::cfn::scad::core::corba::hardware::HardwareLockList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_c6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_b6000000* tcd = (_0RL_cd_FF8C1277964B9560_b6000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getHardwareLockStatus();


}

org::cfn::scad::core::corba::hardware::HardwareLockList* org::cfn::scad::core::corba::server::_objref_CentralServer::getHardwareLockStatus()
{
  _0RL_cd_FF8C1277964B9560_b6000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_c6000000, "getHardwareLockStatus", 22);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_d6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_d1000000* tcd = (_0RL_cd_FF8C1277964B9560_d1000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getNodes();


}

org::cfn::scad::core::corba::util::StringList* org::cfn::scad::core::corba::server::_objref_CentralServer::getNodes()
{
  _0RL_cd_FF8C1277964B9560_d1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_d6000000, "getNodes", 9);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mutil_mStringList_i_cwstring
class _0RL_cd_FF8C1277964B9560_e6000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_e6000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  org::cfn::scad::core::corba::util::StringList_var result;
};

void _0RL_cd_FF8C1277964B9560_e6000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);

}

void _0RL_cd_FF8C1277964B9560_e6000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_FF8C1277964B9560_e6000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::util::StringList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_e6000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::util::StringList;
  (org::cfn::scad::core::corba::util::StringList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_f6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_e6000000* tcd = (_0RL_cd_FF8C1277964B9560_e6000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getHardwareInfos(tcd->arg_0);


}

org::cfn::scad::core::corba::util::StringList* org::cfn::scad::core::corba::server::_objref_CentralServer::getHardwareInfos(const CORBA::WChar* nodeUniqueID)
{
  _0RL_cd_FF8C1277964B9560_e6000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_f6000000, "getHardwareInfos", 17);
  _call_desc.arg_0 = nodeUniqueID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_cwstring_i_cwstring_i_cwstring_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_07000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_07000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  CORBA::WString_var arg_3_;
  const CORBA::WChar* arg_3;
};

void _0RL_cd_FF8C1277964B9560_07000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);
  _n.marshalWString(arg_3,0);

}

void _0RL_cd_FF8C1277964B9560_07000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();
  arg_3_ = _n.unmarshalWString(0);
  arg_3 = arg_3_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_07000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_07000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_17000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_07000000* tcd = (_0RL_cd_FF8C1277964B9560_07000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->requireLock(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
#else
  if (!cd->is_upcall())
    impl->requireLock(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
  else {
    try {
      impl->requireLock(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::requireLock(const clients::User& user, const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* reason)
{
  _0RL_cd_FF8C1277964B9560_07000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_17000000, "requireLock", 12);
  _call_desc.arg_0 = &(clients::User&) user;
  _call_desc.arg_1 = nodeUniqueID;
  _call_desc.arg_2 = hardwareUniqueID;
  _call_desc.arg_3 = reason;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_cwstring_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mHardwareStatus_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_27000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_27000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  org::cfn::scad::core::corba::hardware::HardwareStatus arg_3;
};

void _0RL_cd_FF8C1277964B9560_27000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);
  arg_3 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_27000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();
  (org::cfn::scad::core::corba::hardware::HardwareStatus&)arg_3 <<= _n;

}

const char* const _0RL_cd_FF8C1277964B9560_27000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_27000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_37000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_27000000* tcd = (_0RL_cd_FF8C1277964B9560_27000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->changeHardwareStatus(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
#else
  if (!cd->is_upcall())
    impl->changeHardwareStatus(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
  else {
    try {
      impl->changeHardwareStatus(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::changeHardwareStatus(const clients::User& user, const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, hardware::HardwareStatus newStatus)
{
  _0RL_cd_FF8C1277964B9560_27000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_37000000, "changeHardwareStatus", 21);
  _call_desc.arg_0 = &(clients::User&) user;
  _call_desc.arg_1 = nodeUniqueID;
  _call_desc.arg_2 = hardwareUniqueID;
  _call_desc.arg_3 = newStatus;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mHardwareStatus_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_47000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_47000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  org::cfn::scad::core::corba::hardware::HardwareStatus arg_2;
};

void _0RL_cd_FF8C1277964B9560_47000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  _n.marshalWString(arg_1,0);
  arg_2 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_47000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  (org::cfn::scad::core::corba::hardware::HardwareStatus&)arg_2 <<= _n;

}

const char* const _0RL_cd_FF8C1277964B9560_47000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_47000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_57000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_47000000* tcd = (_0RL_cd_FF8C1277964B9560_47000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->changeAllHardwareStatus(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    impl->changeAllHardwareStatus(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      impl->changeAllHardwareStatus(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::changeAllHardwareStatus(const clients::User& user, const CORBA::WChar* nodeUniqueID, hardware::HardwareStatus newStatus)
{
  _0RL_cd_FF8C1277964B9560_47000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_57000000, "changeAllHardwareStatus", 24);
  _call_desc.arg_0 = &(clients::User&) user;
  _call_desc.arg_1 = nodeUniqueID;
  _call_desc.arg_2 = newStatus;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mFieldData_i_cwstring_i_cwstring_i_cwstring_i_cwstring
class _0RL_cd_FF8C1277964B9560_67000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_67000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  CORBA::WString_var arg_3_;
  const CORBA::WChar* arg_3;
  org::cfn::scad::core::corba::hardware::FieldData_var result;
};

void _0RL_cd_FF8C1277964B9560_67000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);
  _n.marshalWString(arg_3,0);

}

void _0RL_cd_FF8C1277964B9560_67000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();
  arg_3_ = _n.unmarshalWString(0);
  arg_3 = arg_3_.in();

}

void _0RL_cd_FF8C1277964B9560_67000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::FieldData&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_67000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::hardware::FieldData;
  (org::cfn::scad::core::corba::hardware::FieldData&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_77000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_67000000* tcd = (_0RL_cd_FF8C1277964B9560_67000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getParameterValue(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);


}

org::cfn::scad::core::corba::hardware::FieldData* org::cfn::scad::core::corba::server::_objref_CentralServer::getParameterValue(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, const CORBA::WChar* fieldUniqueID)
{
  _0RL_cd_FF8C1277964B9560_67000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_77000000, "getParameterValue", 18);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = parameterUniqueID;
  _call_desc.arg_3 = fieldUniqueID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mFieldDataList_i_cwstring_i_cwstring_i_cwstring
class _0RL_cd_FF8C1277964B9560_87000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_87000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  org::cfn::scad::core::corba::hardware::FieldDataList_var result;
};

void _0RL_cd_FF8C1277964B9560_87000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);

}

void _0RL_cd_FF8C1277964B9560_87000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();

}

void _0RL_cd_FF8C1277964B9560_87000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::FieldDataList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_87000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::hardware::FieldDataList;
  (org::cfn::scad::core::corba::hardware::FieldDataList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_97000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_87000000* tcd = (_0RL_cd_FF8C1277964B9560_87000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getParameterValues(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

org::cfn::scad::core::corba::hardware::FieldDataList* org::cfn::scad::core::corba::server::_objref_CentralServer::getParameterValues(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID)
{
  _0RL_cd_FF8C1277964B9560_87000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_97000000, "getParameterValues", 19);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = parameterUniqueID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mExtraLib_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mutil_mTimeStamp
class _0RL_cd_FF8C1277964B9560_a7000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_a7000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  org::cfn::scad::core::corba::util::TimeStamp arg_1_;
  const org::cfn::scad::core::corba::util::TimeStamp* arg_1;
  org::cfn::scad::core::corba::hardware::ExtraLib_var result;
};

void _0RL_cd_FF8C1277964B9560_a7000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  (const org::cfn::scad::core::corba::util::TimeStamp&) *arg_1 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_a7000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  (org::cfn::scad::core::corba::util::TimeStamp&)arg_1_ <<= _n;
  arg_1 = &arg_1_;

}

void _0RL_cd_FF8C1277964B9560_a7000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::ExtraLib&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_a7000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::hardware::ExtraLib;
  (org::cfn::scad::core::corba::hardware::ExtraLib&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_b7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_a7000000* tcd = (_0RL_cd_FF8C1277964B9560_a7000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getExtraLibs(tcd->arg_0, *tcd->arg_1);


}

org::cfn::scad::core::corba::hardware::ExtraLib* org::cfn::scad::core::corba::server::_objref_CentralServer::getExtraLibs(const CORBA::WChar* nodeUniqueID, const util::TimeStamp& lastDownload)
{
  _0RL_cd_FF8C1277964B9560_a7000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_b7000000, "getExtraLibs", 13);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = &(util::TimeStamp&) lastDownload;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_cwstring_i_cwstring_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mFieldDataList_e_corg_mcfn_mscad_mcore_mcorba_mhardware_mConfigurationException_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_c7000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_c7000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  CORBA::WString_var arg_3_;
  const CORBA::WChar* arg_3;
  org::cfn::scad::core::corba::hardware::FieldDataList_var arg_4_;
  const org::cfn::scad::core::corba::hardware::FieldDataList* arg_4;
};

void _0RL_cd_FF8C1277964B9560_c7000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);
  _n.marshalWString(arg_3,0);
  (const org::cfn::scad::core::corba::hardware::FieldDataList&) *arg_4 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_c7000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();
  arg_3_ = _n.unmarshalWString(0);
  arg_3 = arg_3_.in();
  arg_4_ = new org::cfn::scad::core::corba::hardware::FieldDataList;
  (org::cfn::scad::core::corba::hardware::FieldDataList&)arg_4_ <<= _n;
  arg_4 = &arg_4_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_c7000000::_user_exns[] = {
  org::cfn::scad::core::corba::hardware::ConfigurationException::_PD_repoId,
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_c7000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::hardware::ConfigurationException::_PD_repoId) ) {
    org::cfn::scad::core::corba::hardware::ConfigurationException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_d7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_c7000000* tcd = (_0RL_cd_FF8C1277964B9560_c7000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->configure(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, *tcd->arg_4);
#else
  if (!cd->is_upcall())
    impl->configure(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, *tcd->arg_4);
  else {
    try {
      impl->configure(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, *tcd->arg_4);
    }
    catch(org::cfn::scad::core::corba::hardware::ConfigurationException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::configure(const clients::User& usr, const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, const hardware::FieldDataList& data)
{
  _0RL_cd_FF8C1277964B9560_c7000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_d7000000, "configure", 10);
  _call_desc.arg_0 = &(clients::User&) usr;
  _call_desc.arg_1 = nodeUniqueID;
  _call_desc.arg_2 = hardwareUniqueID;
  _call_desc.arg_3 = parameterUniqueID;
  _call_desc.arg_4 = &(hardware::FieldDataList&) data;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_e7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_f2000000* tcd = (_0RL_cd_FF8C1277964B9560_f2000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getNodeConnectionStatus(tcd->arg_0);


}

org::cfn::scad::core::corba::hardware::ConnectionStatus org::cfn::scad::core::corba::server::_objref_CentralServer::getNodeConnectionStatus(const CORBA::WChar* nodeUniqueID)
{
  _0RL_cd_FF8C1277964B9560_f2000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_e7000000, "getNodeConnectionStatus", 24);
  _call_desc.arg_0 = nodeUniqueID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mConnectionStatus_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_f7000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_f7000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  org::cfn::scad::core::corba::hardware::ConnectionStatus arg_2;
};

void _0RL_cd_FF8C1277964B9560_f7000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  _n.marshalWString(arg_1,0);
  arg_2 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_f7000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  (org::cfn::scad::core::corba::hardware::ConnectionStatus&)arg_2 <<= _n;

}

const char* const _0RL_cd_FF8C1277964B9560_f7000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_f7000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_08000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_f7000000* tcd = (_0RL_cd_FF8C1277964B9560_f7000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->changeNodeConnectionStatus(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    impl->changeNodeConnectionStatus(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      impl->changeNodeConnectionStatus(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::changeNodeConnectionStatus(const clients::User& usr, const CORBA::WChar* nodeUniqueID, hardware::ConnectionStatus newStatus)
{
  _0RL_cd_FF8C1277964B9560_f7000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_08000000, "changeNodeConnectionStatus", 27);
  _call_desc.arg_0 = &(clients::User&) usr;
  _call_desc.arg_1 = nodeUniqueID;
  _call_desc.arg_2 = newStatus;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_18000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_53000000* tcd = (_0RL_cd_FF8C1277964B9560_53000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getAllHardwareConnectionStatus(tcd->arg_0);


}

org::cfn::scad::core::corba::hardware::ConnectionList* org::cfn::scad::core::corba::server::_objref_CentralServer::getAllHardwareConnectionStatus(const CORBA::WChar* nodeUniqueID)
{
  _0RL_cd_FF8C1277964B9560_53000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_18000000, "getAllHardwareConnectionStatus", 31);
  _call_desc.arg_0 = nodeUniqueID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_28000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_73000000* tcd = (_0RL_cd_FF8C1277964B9560_73000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getHardwareConnectionStatus(tcd->arg_0, tcd->arg_1);


}

org::cfn::scad::core::corba::hardware::ConnectionStatus org::cfn::scad::core::corba::server::_objref_CentralServer::getHardwareConnectionStatus(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID)
{
  _0RL_cd_FF8C1277964B9560_73000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_28000000, "getHardwareConnectionStatus", 28);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_cwstring_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mConnectionStatus_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_38000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_38000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  org::cfn::scad::core::corba::hardware::ConnectionStatus arg_3;
};

void _0RL_cd_FF8C1277964B9560_38000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);
  arg_3 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_38000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();
  (org::cfn::scad::core::corba::hardware::ConnectionStatus&)arg_3 <<= _n;

}

const char* const _0RL_cd_FF8C1277964B9560_38000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_38000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_48000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_38000000* tcd = (_0RL_cd_FF8C1277964B9560_38000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->changeHardwareConnectionStatus(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
#else
  if (!cd->is_upcall())
    impl->changeHardwareConnectionStatus(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
  else {
    try {
      impl->changeHardwareConnectionStatus(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::changeHardwareConnectionStatus(const clients::User& usr, const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, hardware::ConnectionStatus newStatus)
{
  _0RL_cd_FF8C1277964B9560_38000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_48000000, "changeHardwareConnectionStatus", 31);
  _call_desc.arg_0 = &(clients::User&) usr;
  _call_desc.arg_1 = nodeUniqueID;
  _call_desc.arg_2 = hardwareUniqueID;
  _call_desc.arg_3 = newStatus;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mConnectionList_i_cwstring_i_cwstring
class _0RL_cd_FF8C1277964B9560_58000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_58000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  org::cfn::scad::core::corba::hardware::ConnectionList_var result;
};

void _0RL_cd_FF8C1277964B9560_58000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);

}

void _0RL_cd_FF8C1277964B9560_58000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_FF8C1277964B9560_58000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::ConnectionList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_58000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::hardware::ConnectionList;
  (org::cfn::scad::core::corba::hardware::ConnectionList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_68000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_58000000* tcd = (_0RL_cd_FF8C1277964B9560_58000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getAllParametersConnectionStatus(tcd->arg_0, tcd->arg_1);


}

org::cfn::scad::core::corba::hardware::ConnectionList* org::cfn::scad::core::corba::server::_objref_CentralServer::getAllParametersConnectionStatus(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID)
{
  _0RL_cd_FF8C1277964B9560_58000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_68000000, "getAllParametersConnectionStatus", 33);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mConnectionStatus_i_cwstring_i_cwstring_i_cwstring
class _0RL_cd_FF8C1277964B9560_78000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_78000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  org::cfn::scad::core::corba::hardware::ConnectionStatus result;
};

void _0RL_cd_FF8C1277964B9560_78000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);

}

void _0RL_cd_FF8C1277964B9560_78000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();

}

void _0RL_cd_FF8C1277964B9560_78000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_78000000::unmarshalReturnedValues(cdrStream& _n)
{
  (org::cfn::scad::core::corba::hardware::ConnectionStatus&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_88000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_78000000* tcd = (_0RL_cd_FF8C1277964B9560_78000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getParameterConnectionStatus(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

org::cfn::scad::core::corba::hardware::ConnectionStatus org::cfn::scad::core::corba::server::_objref_CentralServer::getParameterConnectionStatus(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID)
{
  _0RL_cd_FF8C1277964B9560_78000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_88000000, "getParameterConnectionStatus", 29);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = parameterUniqueID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_cwstring_i_cwstring_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mConnectionStatus_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_98000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_98000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  CORBA::WString_var arg_3_;
  const CORBA::WChar* arg_3;
  org::cfn::scad::core::corba::hardware::ConnectionStatus arg_4;
};

void _0RL_cd_FF8C1277964B9560_98000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);
  _n.marshalWString(arg_3,0);
  arg_4 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_98000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();
  arg_3_ = _n.unmarshalWString(0);
  arg_3 = arg_3_.in();
  (org::cfn::scad::core::corba::hardware::ConnectionStatus&)arg_4 <<= _n;

}

const char* const _0RL_cd_FF8C1277964B9560_98000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_98000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_a8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_98000000* tcd = (_0RL_cd_FF8C1277964B9560_98000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->changeParameterConnectionStatus(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
#else
  if (!cd->is_upcall())
    impl->changeParameterConnectionStatus(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
  else {
    try {
      impl->changeParameterConnectionStatus(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::changeParameterConnectionStatus(const clients::User& usr, const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, hardware::ConnectionStatus newStatus)
{
  _0RL_cd_FF8C1277964B9560_98000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_a8000000, "changeParameterConnectionStatus", 32);
  _call_desc.arg_0 = &(clients::User&) usr;
  _call_desc.arg_1 = nodeUniqueID;
  _call_desc.arg_2 = hardwareUniqueID;
  _call_desc.arg_3 = parameterUniqueID;
  _call_desc.arg_4 = newStatus;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mTransferFunction_i_cwstring_i_cwstring_i_cwstring
class _0RL_cd_FF8C1277964B9560_b8000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_b8000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  org::cfn::scad::core::corba::hardware::TransferFunction_var result;
};

void _0RL_cd_FF8C1277964B9560_b8000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);

}

void _0RL_cd_FF8C1277964B9560_b8000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();

}

void _0RL_cd_FF8C1277964B9560_b8000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::TransferFunction&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_b8000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::hardware::TransferFunction;
  (org::cfn::scad::core::corba::hardware::TransferFunction&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_c8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_b8000000* tcd = (_0RL_cd_FF8C1277964B9560_b8000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getTransferFunction(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

org::cfn::scad::core::corba::hardware::TransferFunction* org::cfn::scad::core::corba::server::_objref_CentralServer::getTransferFunction(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID)
{
  _0RL_cd_FF8C1277964B9560_b8000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_c8000000, "getTransferFunction", 20);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = parameterUniqueID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_cwstring_i_cwstring_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mTransferFunction_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_d8000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_d8000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  CORBA::WString_var arg_3_;
  const CORBA::WChar* arg_3;
  org::cfn::scad::core::corba::hardware::TransferFunction_var arg_4_;
  const org::cfn::scad::core::corba::hardware::TransferFunction* arg_4;
};

void _0RL_cd_FF8C1277964B9560_d8000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);
  _n.marshalWString(arg_3,0);
  (const org::cfn::scad::core::corba::hardware::TransferFunction&) *arg_4 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_d8000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();
  arg_3_ = _n.unmarshalWString(0);
  arg_3 = arg_3_.in();
  arg_4_ = new org::cfn::scad::core::corba::hardware::TransferFunction;
  (org::cfn::scad::core::corba::hardware::TransferFunction&)arg_4_ <<= _n;
  arg_4 = &arg_4_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_d8000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_d8000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_e8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_d8000000* tcd = (_0RL_cd_FF8C1277964B9560_d8000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->setTransferFunction(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, *tcd->arg_4);
#else
  if (!cd->is_upcall())
    impl->setTransferFunction(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, *tcd->arg_4);
  else {
    try {
      impl->setTransferFunction(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, *tcd->arg_4);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::setTransferFunction(const clients::User& usr, const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, const hardware::TransferFunction& tf)
{
  _0RL_cd_FF8C1277964B9560_d8000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_e8000000, "setTransferFunction", 20);
  _call_desc.arg_0 = &(clients::User&) usr;
  _call_desc.arg_1 = nodeUniqueID;
  _call_desc.arg_2 = hardwareUniqueID;
  _call_desc.arg_3 = parameterUniqueID;
  _call_desc.arg_4 = &(hardware::TransferFunction&) tf;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_f8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_20000000* tcd = (_0RL_cd_FF8C1277964B9560_20000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  impl->connectionStatusChanged(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::connectionStatusChanged(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID)
{
  _0RL_cd_FF8C1277964B9560_20000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_f8000000, "connectionStatusChanged", 24);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = parameterUniqueID;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityOperations_i_cwstring_i_cwstring_i_cwstring
class _0RL_cd_FF8C1277964B9560_09000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_09000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  org::cfn::scad::core::corba::security::SecurityOperations arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  CORBA::WString_var arg_3_;
  const CORBA::WChar* arg_3;
  CORBA::WString_var arg_4_;
  const CORBA::WChar* arg_4;
  CORBA::Boolean result;
};

void _0RL_cd_FF8C1277964B9560_09000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  arg_1 >>= _n;
  _n.marshalWString(arg_2,0);
  _n.marshalWString(arg_3,0);
  _n.marshalWString(arg_4,0);

}

void _0RL_cd_FF8C1277964B9560_09000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  (org::cfn::scad::core::corba::security::SecurityOperations&)arg_1 <<= _n;
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();
  arg_3_ = _n.unmarshalWString(0);
  arg_3 = arg_3_.in();
  arg_4_ = _n.unmarshalWString(0);
  arg_4 = arg_4_.in();

}

void _0RL_cd_FF8C1277964B9560_09000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_FF8C1277964B9560_09000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_19000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_09000000* tcd = (_0RL_cd_FF8C1277964B9560_09000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->isUserAllowed(*tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);


}

CORBA::Boolean org::cfn::scad::core::corba::server::_objref_CentralServer::isUserAllowed(const clients::User& usr, security::SecurityOperations oper, const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID)
{
  _0RL_cd_FF8C1277964B9560_09000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_19000000, "isUserAllowed", 14);
  _call_desc.arg_0 = &(clients::User&) usr;
  _call_desc.arg_1 = oper;
  _call_desc.arg_2 = nodeUniqueID;
  _call_desc.arg_3 = hardwareUniqueID;
  _call_desc.arg_4 = parameterUniqueID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mclients_mUserList
class _0RL_cd_FF8C1277964B9560_29000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_29000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  org::cfn::scad::core::corba::clients::UserList_var result;
};

void _0RL_cd_FF8C1277964B9560_29000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::UserList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_29000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::clients::UserList;
  (org::cfn::scad::core::corba::clients::UserList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_39000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_29000000* tcd = (_0RL_cd_FF8C1277964B9560_29000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getConnectedUsers();


}

org::cfn::scad::core::corba::clients::UserList* org::cfn::scad::core::corba::server::_objref_CentralServer::getConnectedUsers()
{
  _0RL_cd_FF8C1277964B9560_29000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_39000000, "getConnectedUsers", 18);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_cwstring_i_cwstring_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_49000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_49000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  CORBA::Boolean result;
};

void _0RL_cd_FF8C1277964B9560_49000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);

}

void _0RL_cd_FF8C1277964B9560_49000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();

}

void _0RL_cd_FF8C1277964B9560_49000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_FF8C1277964B9560_49000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_FF8C1277964B9560_49000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_49000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_59000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_49000000* tcd = (_0RL_cd_FF8C1277964B9560_49000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->lock(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->lock(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->lock(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

CORBA::Boolean org::cfn::scad::core::corba::server::_objref_CentralServer::lock(const clients::User& usr, const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID)
{
  _0RL_cd_FF8C1277964B9560_49000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_59000000, "lock", 5);
  _call_desc.arg_0 = &(clients::User&) usr;
  _call_desc.arg_1 = nodeUniqueID;
  _call_desc.arg_2 = hardwareUniqueID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_69000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_49000000* tcd = (_0RL_cd_FF8C1277964B9560_49000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->unlock(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->unlock(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->unlock(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

CORBA::Boolean org::cfn::scad::core::corba::server::_objref_CentralServer::unlock(const clients::User& usr, const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID)
{
  _0RL_cd_FF8C1277964B9560_49000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_69000000, "unlock", 7);
  _call_desc.arg_0 = &(clients::User&) usr;
  _call_desc.arg_1 = nodeUniqueID;
  _call_desc.arg_2 = hardwareUniqueID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_79000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_79000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
};

void _0RL_cd_FF8C1277964B9560_79000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_79000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_79000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_79000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_89000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_79000000* tcd = (_0RL_cd_FF8C1277964B9560_79000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->eventEditLock(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->eventEditLock(*tcd->arg_0);
  else {
    try {
      impl->eventEditLock(*tcd->arg_0);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::eventEditLock(const clients::User& usr)
{
  _0RL_cd_FF8C1277964B9560_79000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_89000000, "eventEditLock", 14);
  _call_desc.arg_0 = &(clients::User&) usr;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_99000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_79000000* tcd = (_0RL_cd_FF8C1277964B9560_79000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->eventEditUnLock(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->eventEditUnLock(*tcd->arg_0);
  else {
    try {
      impl->eventEditUnLock(*tcd->arg_0);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::eventEditUnLock(const clients::User& usr)
{
  _0RL_cd_FF8C1277964B9560_79000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_99000000, "eventEditUnLock", 16);
  _call_desc.arg_0 = &(clients::User&) usr;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_a9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_72000000* tcd = (_0RL_cd_FF8C1277964B9560_72000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  impl->hardwareListChanged(tcd->arg_0);


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::hardwareListChanged(const CORBA::WChar* nodeUniqueID)
{
  _0RL_cd_FF8C1277964B9560_72000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_a9000000, "hardwareListChanged", 20);
  _call_desc.arg_0 = nodeUniqueID;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean
class _0RL_cd_FF8C1277964B9560_b9000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_b9000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::Boolean result;
};

void _0RL_cd_FF8C1277964B9560_b9000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_FF8C1277964B9560_b9000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_c9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_b9000000* tcd = (_0RL_cd_FF8C1277964B9560_b9000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->isEventEditLocked();


}

CORBA::Boolean org::cfn::scad::core::corba::server::_objref_CentralServer::isEventEditLocked()
{
  _0RL_cd_FF8C1277964B9560_b9000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_c9000000, "isEventEditLocked", 18);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_d9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_b1000000* tcd = (_0RL_cd_FF8C1277964B9560_b1000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getXMLEvents();


}

CORBA::WChar* org::cfn::scad::core::corba::server::_objref_CentralServer::getXMLEvents()
{
  _0RL_cd_FF8C1277964B9560_b1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_d9000000, "getXMLEvents", 13);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mEventList
class _0RL_cd_FF8C1277964B9560_e9000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_e9000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  org::cfn::scad::core::corba::hardware::EventList_var result;
};

void _0RL_cd_FF8C1277964B9560_e9000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::EventList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_e9000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::hardware::EventList;
  (org::cfn::scad::core::corba::hardware::EventList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_f9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_e9000000* tcd = (_0RL_cd_FF8C1277964B9560_e9000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getLastEventTable();


}

org::cfn::scad::core::corba::hardware::EventList* org::cfn::scad::core::corba::server::_objref_CentralServer::getLastEventTable()
{
  _0RL_cd_FF8C1277964B9560_e9000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_f9000000, "getLastEventTable", 18);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mEventList_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_0a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_0a000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  org::cfn::scad::core::corba::hardware::EventList_var arg_1_;
  const org::cfn::scad::core::corba::hardware::EventList* arg_1;
};

void _0RL_cd_FF8C1277964B9560_0a000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  (const org::cfn::scad::core::corba::hardware::EventList&) *arg_1 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_0a000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new org::cfn::scad::core::corba::hardware::EventList;
  (org::cfn::scad::core::corba::hardware::EventList&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_0a000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_0a000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_1a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_0a000000* tcd = (_0RL_cd_FF8C1277964B9560_0a000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->setEventTable(*tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->setEventTable(*tcd->arg_0, *tcd->arg_1);
  else {
    try {
      impl->setEventTable(*tcd->arg_0, *tcd->arg_1);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::setEventTable(const clients::User& usr, const hardware::EventList& evtList)
{
  _0RL_cd_FF8C1277964B9560_0a000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_1a000000, "setEventTable", 14);
  _call_desc.arg_0 = &(clients::User&) usr;
  _call_desc.arg_1 = &(hardware::EventList&) evtList;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mEventList_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_2a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_2a000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  org::cfn::scad::core::corba::hardware::EventList_var arg_1_;
  const org::cfn::scad::core::corba::hardware::EventList* arg_1;
};

void _0RL_cd_FF8C1277964B9560_2a000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  (const org::cfn::scad::core::corba::hardware::EventList&) *arg_1 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_2a000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = new org::cfn::scad::core::corba::hardware::EventList;
  (org::cfn::scad::core::corba::hardware::EventList&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_2a000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_2a000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_3a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_2a000000* tcd = (_0RL_cd_FF8C1277964B9560_2a000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->fireEventTable(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->fireEventTable(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      impl->fireEventTable(tcd->arg_0, *tcd->arg_1);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::fireEventTable(const CORBA::WChar* nodeUniqueID, const hardware::EventList& evtList)
{
  _0RL_cd_FF8C1277964B9560_2a000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_3a000000, "fireEventTable", 15);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = &(hardware::EventList&) evtList;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_4a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_a0000000* tcd = (_0RL_cd_FF8C1277964B9560_a0000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  impl->newEventListAdded(*tcd->arg_0);


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::newEventListAdded(const hardware::EventList& evtList)
{
  _0RL_cd_FF8C1277964B9560_a0000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_4a000000, "newEventListAdded", 18);
  _call_desc.arg_0 = &(hardware::EventList&) evtList;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_5a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_79000000* tcd = (_0RL_cd_FF8C1277964B9560_79000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->abort(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->abort(*tcd->arg_0);
  else {
    try {
      impl->abort(*tcd->arg_0);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::abort(const clients::User& usr)
{
  _0RL_cd_FF8C1277964B9560_79000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_5a000000, "abort", 6);
  _call_desc.arg_0 = &(clients::User&) usr;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_6a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_a5000000* tcd = (_0RL_cd_FF8C1277964B9560_a5000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  impl->hardwareStatusChange(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::hardwareStatusChange(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, hardware::HardwareStatus newStatus)
{
  _0RL_cd_FF8C1277964B9560_a5000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_6a000000, "hardwareStatusChange", 21);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = newStatus;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_7a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_c5000000* tcd = (_0RL_cd_FF8C1277964B9560_c5000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  impl->nodeStatusChange(tcd->arg_0, tcd->arg_1);


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::nodeStatusChange(const CORBA::WChar* nodeUniqueID, hardware::NodeStatus newStatus)
{
  _0RL_cd_FF8C1277964B9560_c5000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_7a000000, "nodeStatusChange", 17);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = newStatus;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mNodeStatus_i_cwstring
class _0RL_cd_FF8C1277964B9560_8a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_8a000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  org::cfn::scad::core::corba::hardware::NodeStatus result;
};

void _0RL_cd_FF8C1277964B9560_8a000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);

}

void _0RL_cd_FF8C1277964B9560_8a000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_FF8C1277964B9560_8a000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_8a000000::unmarshalReturnedValues(cdrStream& _n)
{
  (org::cfn::scad::core::corba::hardware::NodeStatus&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_9a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_8a000000* tcd = (_0RL_cd_FF8C1277964B9560_8a000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getNodeStatus(tcd->arg_0);


}

org::cfn::scad::core::corba::hardware::NodeStatus org::cfn::scad::core::corba::server::_objref_CentralServer::getNodeStatus(const CORBA::WChar* nodeUniqueID)
{
  _0RL_cd_FF8C1277964B9560_8a000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_9a000000, "getNodeStatus", 14);
  _call_desc.arg_0 = nodeUniqueID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mhardware_mHardwareStatusList_i_cwstring
class _0RL_cd_FF8C1277964B9560_aa000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_aa000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  org::cfn::scad::core::corba::hardware::HardwareStatusList_var result;
};

void _0RL_cd_FF8C1277964B9560_aa000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);

}

void _0RL_cd_FF8C1277964B9560_aa000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_FF8C1277964B9560_aa000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::hardware::HardwareStatusList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_aa000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::hardware::HardwareStatusList;
  (org::cfn::scad::core::corba::hardware::HardwareStatusList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_ba000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_aa000000* tcd = (_0RL_cd_FF8C1277964B9560_aa000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getAllHardwareStatus(tcd->arg_0);


}

org::cfn::scad::core::corba::hardware::HardwareStatusList* org::cfn::scad::core::corba::server::_objref_CentralServer::getAllHardwareStatus(const CORBA::WChar* nodeUniqueID)
{
  _0RL_cd_FF8C1277964B9560_aa000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ba000000, "getAllHardwareStatus", 21);
  _call_desc.arg_0 = nodeUniqueID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mutil_mTimeStamp
class _0RL_cd_FF8C1277964B9560_ca000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_ca000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  org::cfn::scad::core::corba::util::TimeStamp result;
};

void _0RL_cd_FF8C1277964B9560_ca000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::util::TimeStamp&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_ca000000::unmarshalReturnedValues(cdrStream& _n)
{
  (org::cfn::scad::core::corba::util::TimeStamp&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_da000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_ca000000* tcd = (_0RL_cd_FF8C1277964B9560_ca000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getCurrentTime();


}

org::cfn::scad::core::corba::util::TimeStamp org::cfn::scad::core::corba::server::_objref_CentralServer::getCurrentTime()
{
  _0RL_cd_FF8C1277964B9560_ca000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_da000000, "getCurrentTime", 15);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_ea000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_00000000* tcd = (_0RL_cd_FF8C1277964B9560_00000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  impl->newDataAvailable(tcd->arg_0, tcd->arg_1, tcd->arg_2, *tcd->arg_3);


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::newDataAvailable(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, const db::Data& data)
{
  _0RL_cd_FF8C1277964B9560_00000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ea000000, "newDataAvailable", 17);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = parameterUniqueID;
  _call_desc.arg_3 = &(db::Data&) data;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_fa000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_a4000000* tcd = (_0RL_cd_FF8C1277964B9560_a4000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  impl->newDataStored(tcd->arg_0, tcd->arg_1, tcd->arg_2, *tcd->arg_3, *tcd->arg_4, *tcd->arg_5);


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::newDataStored(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, const hardware::EventList& eList, const util::TimeStamp& tstart, const util::TimeStamp& tend)
{
  _0RL_cd_FF8C1277964B9560_a4000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_fa000000, "newDataStored", 14);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = parameterUniqueID;
  _call_desc.arg_3 = &(hardware::EventList&) eList;
  _call_desc.arg_4 = &(util::TimeStamp&) tstart;
  _call_desc.arg_5 = &(util::TimeStamp&) tend;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_0b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_60000000* tcd = (_0RL_cd_FF8C1277964B9560_60000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getData(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);


}

org::cfn::scad::core::corba::db::DataList* org::cfn::scad::core::corba::server::_objref_CentralServer::getData(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, CORBA::LongLong event_id, const CORBA::WChar* event_name_id)
{
  _0RL_cd_FF8C1277964B9560_60000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_0b000000, "getData", 8);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = parameterUniqueID;
  _call_desc.arg_3 = event_id;
  _call_desc.arg_4 = event_name_id;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_1b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_80000000* tcd = (_0RL_cd_FF8C1277964B9560_80000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getDataFromTime(tcd->arg_0, tcd->arg_1, tcd->arg_2, *tcd->arg_3, *tcd->arg_4);


}

org::cfn::scad::core::corba::db::DataList* org::cfn::scad::core::corba::server::_objref_CentralServer::getDataFromTime(const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, const util::TimeStamp& tstart, const util::TimeStamp& tend)
{
  _0RL_cd_FF8C1277964B9560_80000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_1b000000, "getDataFromTime", 16);
  _call_desc.arg_0 = nodeUniqueID;
  _call_desc.arg_1 = hardwareUniqueID;
  _call_desc.arg_2 = parameterUniqueID;
  _call_desc.arg_3 = &(util::TimeStamp&) tstart;
  _call_desc.arg_4 = &(util::TimeStamp&) tend;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_2b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_b1000000* tcd = (_0RL_cd_FF8C1277964B9560_b1000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getPluginsXML();


}

CORBA::WChar* org::cfn::scad::core::corba::server::_objref_CentralServer::getPluginsXML()
{
  _0RL_cd_FF8C1277964B9560_b1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_2b000000, "getPluginsXML", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mclients_mProfileList
class _0RL_cd_FF8C1277964B9560_3b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_3b000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  org::cfn::scad::core::corba::clients::ProfileList_var result;
};

void _0RL_cd_FF8C1277964B9560_3b000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::ProfileList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_3b000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::clients::ProfileList;
  (org::cfn::scad::core::corba::clients::ProfileList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_4b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_3b000000* tcd = (_0RL_cd_FF8C1277964B9560_3b000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getAllPublicProfiles();


}

org::cfn::scad::core::corba::clients::ProfileList* org::cfn::scad::core::corba::server::_objref_CentralServer::getAllPublicProfiles()
{
  _0RL_cd_FF8C1277964B9560_3b000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_4b000000, "getAllPublicProfiles", 21);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mclients_mProfileList_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser
class _0RL_cd_FF8C1277964B9560_5b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_5b000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  org::cfn::scad::core::corba::clients::ProfileList_var result;
};

void _0RL_cd_FF8C1277964B9560_5b000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_5b000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_FF8C1277964B9560_5b000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::ProfileList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_5b000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::clients::ProfileList;
  (org::cfn::scad::core::corba::clients::ProfileList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_6b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_5b000000* tcd = (_0RL_cd_FF8C1277964B9560_5b000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getAllUserProfiles(*tcd->arg_0);


}

org::cfn::scad::core::corba::clients::ProfileList* org::cfn::scad::core::corba::server::_objref_CentralServer::getAllUserProfiles(const clients::User& usr)
{
  _0RL_cd_FF8C1277964B9560_5b000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_6b000000, "getAllUserProfiles", 19);
  _call_desc.arg_0 = &(clients::User&) usr;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_corg_mcfn_mscad_mcore_mcorba_mclients_mProfile
class _0RL_cd_FF8C1277964B9560_7b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_7b000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  org::cfn::scad::core::corba::clients::Profile_var arg_1_;
  const org::cfn::scad::core::corba::clients::Profile* arg_1;
};

void _0RL_cd_FF8C1277964B9560_7b000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  (const org::cfn::scad::core::corba::clients::Profile&) *arg_1 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_7b000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new org::cfn::scad::core::corba::clients::Profile;
  (org::cfn::scad::core::corba::clients::Profile&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_8b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_7b000000* tcd = (_0RL_cd_FF8C1277964B9560_7b000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  impl->saveProfile(*tcd->arg_0, *tcd->arg_1);


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::saveProfile(const clients::User& usr, const clients::Profile& prof)
{
  _0RL_cd_FF8C1277964B9560_7b000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_8b000000, "saveProfile", 12);
  _call_desc.arg_0 = &(clients::User&) usr;
  _call_desc.arg_1 = &(clients::Profile&) prof;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_9b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_7b000000* tcd = (_0RL_cd_FF8C1277964B9560_7b000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  impl->deleteProfile(*tcd->arg_0, *tcd->arg_1);


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::deleteProfile(const clients::User& usr, const clients::Profile& prof)
{
  _0RL_cd_FF8C1277964B9560_7b000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_9b000000, "deleteProfile", 14);
  _call_desc.arg_0 = &(clients::User&) usr;
  _call_desc.arg_1 = &(clients::Profile&) prof;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_ab000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_16000000* tcd = (_0RL_cd_FF8C1277964B9560_16000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  impl->userPropertyChanged(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::userPropertyChanged(const CORBA::WChar* username, const CORBA::WChar* propName, CORBA::Boolean propValue)
{
  _0RL_cd_FF8C1277964B9560_16000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ab000000, "userPropertyChanged", 20);
  _call_desc.arg_0 = username;
  _call_desc.arg_1 = propName;
  _call_desc.arg_2 = propValue;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mutil_mStringList_i_cwstring_i_cwstring_i_cwstring_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mutil_mTimeStamp_i_corg_mcfn_mscad_mcore_mcorba_mutil_mTimeStamp
class _0RL_cd_FF8C1277964B9560_bb000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_bb000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  org::cfn::scad::core::corba::util::StringList_var arg_1_;
  const org::cfn::scad::core::corba::util::StringList* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
  CORBA::WString_var arg_3_;
  const CORBA::WChar* arg_3;
  CORBA::WString_var arg_4_;
  const CORBA::WChar* arg_4;
  CORBA::WString_var arg_5_;
  const CORBA::WChar* arg_5;
  org::cfn::scad::core::corba::util::TimeStamp arg_6_;
  const org::cfn::scad::core::corba::util::TimeStamp* arg_6;
  org::cfn::scad::core::corba::util::TimeStamp arg_7_;
  const org::cfn::scad::core::corba::util::TimeStamp* arg_7;
};

void _0RL_cd_FF8C1277964B9560_bb000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  (const org::cfn::scad::core::corba::util::StringList&) *arg_1 >>= _n;
  _n.marshalWString(arg_2,0);
  _n.marshalWString(arg_3,0);
  _n.marshalWString(arg_4,0);
  _n.marshalWString(arg_5,0);
  (const org::cfn::scad::core::corba::util::TimeStamp&) *arg_6 >>= _n;
  (const org::cfn::scad::core::corba::util::TimeStamp&) *arg_7 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_bb000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = new org::cfn::scad::core::corba::util::StringList;
  (org::cfn::scad::core::corba::util::StringList&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();
  arg_3_ = _n.unmarshalWString(0);
  arg_3 = arg_3_.in();
  arg_4_ = _n.unmarshalWString(0);
  arg_4 = arg_4_.in();
  arg_5_ = _n.unmarshalWString(0);
  arg_5 = arg_5_.in();
  (org::cfn::scad::core::corba::util::TimeStamp&)arg_6_ <<= _n;
  arg_6 = &arg_6_;
  (org::cfn::scad::core::corba::util::TimeStamp&)arg_7_ <<= _n;
  arg_7 = &arg_7_;

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_cb000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_bb000000* tcd = (_0RL_cd_FF8C1277964B9560_bb000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  impl->shareData(tcd->arg_0, *tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5, *tcd->arg_6, *tcd->arg_7);


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::shareData(const CORBA::WChar* userFrom, const util::StringList& usersTo, const CORBA::WChar* nodeUniqueID, const CORBA::WChar* hardwareUniqueID, const CORBA::WChar* parameterUniqueID, const CORBA::WChar* pluginclassloc, const util::TimeStamp& tstart, const util::TimeStamp& tend)
{
  _0RL_cd_FF8C1277964B9560_bb000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_cb000000, "shareData", 10);
  _call_desc.arg_0 = userFrom;
  _call_desc.arg_1 = &(util::StringList&) usersTo;
  _call_desc.arg_2 = nodeUniqueID;
  _call_desc.arg_3 = hardwareUniqueID;
  _call_desc.arg_4 = parameterUniqueID;
  _call_desc.arg_5 = pluginclassloc;
  _call_desc.arg_6 = &(util::TimeStamp&) tstart;
  _call_desc.arg_7 = &(util::TimeStamp&) tend;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_cwstring_i_cwstring_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_db000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_db000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  CORBA::WString_var arg_2_;
  const CORBA::WChar* arg_2;
};

void _0RL_cd_FF8C1277964B9560_db000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  _n.marshalWString(arg_1,0);
  _n.marshalWString(arg_2,0);

}

void _0RL_cd_FF8C1277964B9560_db000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalWString(0);
  arg_2 = arg_2_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_db000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_db000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_eb000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_db000000* tcd = (_0RL_cd_FF8C1277964B9560_db000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->kickUser(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    impl->kickUser(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      impl->kickUser(*tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::kickUser(const clients::User& administrator, const CORBA::WChar* userToKick, const CORBA::WChar* reason)
{
  _0RL_cd_FF8C1277964B9560_db000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_eb000000, "kickUser", 9);
  _call_desc.arg_0 = &(clients::User&) administrator;
  _call_desc.arg_1 = userToKick;
  _call_desc.arg_2 = reason;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_fb000000(omniCallDescriptor* cd, omniServant* svnt)
{

  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  impl->ping();


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::ping()
{
  _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_fb000000, "ping", 5);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_0c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_c0000000* tcd = (_0RL_cd_FF8C1277964B9560_c0000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getNodesNames(*tcd->arg_0);


}

org::cfn::scad::core::corba::hardware::NameInfoList* org::cfn::scad::core::corba::server::_objref_CentralServer::getNodesNames(const util::StringList& nodeUIDs)
{
  _0RL_cd_FF8C1277964B9560_c0000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_0c000000, "getNodesNames", 14);
  _call_desc.arg_0 = &(util::StringList&) nodeUIDs;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_1c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_e0000000* tcd = (_0RL_cd_FF8C1277964B9560_e0000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getHardwareAndParameterNames(tcd->arg_0, *tcd->arg_1);


}

org::cfn::scad::core::corba::hardware::NameInfoList* org::cfn::scad::core::corba::server::_objref_CentralServer::getHardwareAndParameterNames(const CORBA::WChar* nodeUID, const util::StringList& hwUIDs)
{
  _0RL_cd_FF8C1277964B9560_e0000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_1c000000, "getHardwareAndParameterNames", 29);
  _call_desc.arg_0 = nodeUID;
  _call_desc.arg_1 = &(util::StringList&) hwUIDs;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mNameInfo_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_2c000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_2c000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  org::cfn::scad::core::corba::hardware::NameInfo_var arg_1_;
  const org::cfn::scad::core::corba::hardware::NameInfo* arg_1;
};

void _0RL_cd_FF8C1277964B9560_2c000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  (const org::cfn::scad::core::corba::hardware::NameInfo&) *arg_1 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_2c000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new org::cfn::scad::core::corba::hardware::NameInfo;
  (org::cfn::scad::core::corba::hardware::NameInfo&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_2c000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_2c000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_3c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_2c000000* tcd = (_0RL_cd_FF8C1277964B9560_2c000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->changeName(*tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->changeName(*tcd->arg_0, *tcd->arg_1);
  else {
    try {
      impl->changeName(*tcd->arg_0, *tcd->arg_1);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::changeName(const clients::User& usr, const hardware::NameInfo& ninfo)
{
  _0RL_cd_FF8C1277964B9560_2c000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_3c000000, "changeName", 11);
  _call_desc.arg_0 = &(clients::User&) usr;
  _call_desc.arg_1 = &(hardware::NameInfo&) ninfo;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_4c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_01000000* tcd = (_0RL_cd_FF8C1277964B9560_01000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  impl->nameChanged(*tcd->arg_0);


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::nameChanged(const hardware::NameInfo& ninfo)
{
  _0RL_cd_FF8C1277964B9560_01000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_4c000000, "nameChanged", 12);
  _call_desc.arg_0 = &(hardware::NameInfo&) ninfo;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUserInformations_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mManagementException_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_5c000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_5c000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  org::cfn::scad::core::corba::clients::User_var arg_1_;
  const org::cfn::scad::core::corba::clients::User* arg_1;
  org::cfn::scad::core::corba::clients::UserInformations_var arg_2_;
  const org::cfn::scad::core::corba::clients::UserInformations* arg_2;
};

void _0RL_cd_FF8C1277964B9560_5c000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  (const org::cfn::scad::core::corba::clients::User&) *arg_1 >>= _n;
  (const org::cfn::scad::core::corba::clients::UserInformations&) *arg_2 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_5c000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();
  arg_2_ = new org::cfn::scad::core::corba::clients::UserInformations;
  (org::cfn::scad::core::corba::clients::UserInformations&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_5c000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::ManagementException::_PD_repoId,
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_5c000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::ManagementException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::ManagementException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_6c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_5c000000* tcd = (_0RL_cd_FF8C1277964B9560_5c000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->addUser(*tcd->arg_0, *tcd->arg_1, *tcd->arg_2);
#else
  if (!cd->is_upcall())
    impl->addUser(*tcd->arg_0, *tcd->arg_1, *tcd->arg_2);
  else {
    try {
      impl->addUser(*tcd->arg_0, *tcd->arg_1, *tcd->arg_2);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(org::cfn::scad::core::corba::security::ManagementException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::addUser(const clients::User& administrator, const clients::User& usr, const clients::UserInformations& usrInfo)
{
  _0RL_cd_FF8C1277964B9560_5c000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_6c000000, "addUser", 8);
  _call_desc.arg_0 = &(clients::User&) administrator;
  _call_desc.arg_1 = &(clients::User&) usr;
  _call_desc.arg_2 = &(clients::UserInformations&) usrInfo;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_cwstring_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mManagementException_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_7c000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_7c000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
};

void _0RL_cd_FF8C1277964B9560_7c000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  _n.marshalWString(arg_1,0);

}

void _0RL_cd_FF8C1277964B9560_7c000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_7c000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::ManagementException::_PD_repoId,
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_7c000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::ManagementException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::ManagementException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_8c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_7c000000* tcd = (_0RL_cd_FF8C1277964B9560_7c000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->removeUser(*tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->removeUser(*tcd->arg_0, tcd->arg_1);
  else {
    try {
      impl->removeUser(*tcd->arg_0, tcd->arg_1);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(org::cfn::scad::core::corba::security::ManagementException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::removeUser(const clients::User& administrator, const CORBA::WChar* username)
{
  _0RL_cd_FF8C1277964B9560_7c000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_8c000000, "removeUser", 11);
  _call_desc.arg_0 = &(clients::User&) administrator;
  _call_desc.arg_1 = username;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mManagementException_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_9c000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_9c000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  org::cfn::scad::core::corba::clients::User_var arg_1_;
  const org::cfn::scad::core::corba::clients::User* arg_1;
};

void _0RL_cd_FF8C1277964B9560_9c000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  (const org::cfn::scad::core::corba::clients::User&) *arg_1 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_9c000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_9c000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::ManagementException::_PD_repoId,
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_9c000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::ManagementException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::ManagementException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_ac000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_9c000000* tcd = (_0RL_cd_FF8C1277964B9560_9c000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->editUser(*tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->editUser(*tcd->arg_0, *tcd->arg_1);
  else {
    try {
      impl->editUser(*tcd->arg_0, *tcd->arg_1);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(org::cfn::scad::core::corba::security::ManagementException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::editUser(const clients::User& administrator, const clients::User& usr)
{
  _0RL_cd_FF8C1277964B9560_9c000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ac000000, "editUser", 9);
  _call_desc.arg_0 = &(clients::User&) administrator;
  _call_desc.arg_1 = &(clients::User&) usr;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUserInformations_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mManagementException_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_bc000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_bc000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  org::cfn::scad::core::corba::clients::UserInformations_var arg_1_;
  const org::cfn::scad::core::corba::clients::UserInformations* arg_1;
};

void _0RL_cd_FF8C1277964B9560_bc000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  (const org::cfn::scad::core::corba::clients::UserInformations&) *arg_1 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_bc000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new org::cfn::scad::core::corba::clients::UserInformations;
  (org::cfn::scad::core::corba::clients::UserInformations&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_bc000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::ManagementException::_PD_repoId,
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_bc000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::ManagementException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::ManagementException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_cc000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_bc000000* tcd = (_0RL_cd_FF8C1277964B9560_bc000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->editUserInformations(*tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->editUserInformations(*tcd->arg_0, *tcd->arg_1);
  else {
    try {
      impl->editUserInformations(*tcd->arg_0, *tcd->arg_1);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(org::cfn::scad::core::corba::security::ManagementException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::editUserInformations(const clients::User& administrator, const clients::UserInformations& usrInfos)
{
  _0RL_cd_FF8C1277964B9560_bc000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_cc000000, "editUserInformations", 21);
  _call_desc.arg_0 = &(clients::User&) administrator;
  _call_desc.arg_1 = &(clients::UserInformations&) usrInfos;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mclients_mUserInformations_i_cwstring_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mManagementException
class _0RL_cd_FF8C1277964B9560_dc000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_dc000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  org::cfn::scad::core::corba::clients::UserInformations_var result;
};

void _0RL_cd_FF8C1277964B9560_dc000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);

}

void _0RL_cd_FF8C1277964B9560_dc000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_FF8C1277964B9560_dc000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::UserInformations&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_dc000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::clients::UserInformations;
  (org::cfn::scad::core::corba::clients::UserInformations&)result <<= _n;

}

const char* const _0RL_cd_FF8C1277964B9560_dc000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::ManagementException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_dc000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::ManagementException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::ManagementException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_ec000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_dc000000* tcd = (_0RL_cd_FF8C1277964B9560_dc000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getUserInformations(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getUserInformations(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getUserInformations(tcd->arg_0);
    }
    catch(org::cfn::scad::core::corba::security::ManagementException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

org::cfn::scad::core::corba::clients::UserInformations* org::cfn::scad::core::corba::server::_objref_CentralServer::getUserInformations(const CORBA::WChar* username)
{
  _0RL_cd_FF8C1277964B9560_dc000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ec000000, "getUserInformations", 20);
  _call_desc.arg_0 = username;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mutil_mStringList_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mManagementException
class _0RL_cd_FF8C1277964B9560_fc000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_fc000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::util::StringList_var result;
};

void _0RL_cd_FF8C1277964B9560_fc000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::util::StringList&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_fc000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::util::StringList;
  (org::cfn::scad::core::corba::util::StringList&)result <<= _n;

}

const char* const _0RL_cd_FF8C1277964B9560_fc000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::ManagementException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_fc000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::ManagementException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::ManagementException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_0d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_fc000000* tcd = (_0RL_cd_FF8C1277964B9560_fc000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getAllUsers();
#else
  if (!cd->is_upcall())
    tcd->result = impl->getAllUsers();
  else {
    try {
      tcd->result = impl->getAllUsers();
    }
    catch(org::cfn::scad::core::corba::security::ManagementException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

org::cfn::scad::core::corba::util::StringList* org::cfn::scad::core::corba::server::_objref_CentralServer::getAllUsers()
{
  _0RL_cd_FF8C1277964B9560_fc000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_0d000000, "getAllUsers", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_cwstring_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mManagementException_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_1d000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_1d000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
  org::cfn::scad::core::corba::clients::User_var result;
};

void _0RL_cd_FF8C1277964B9560_1d000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  _n.marshalWString(arg_1,0);

}

void _0RL_cd_FF8C1277964B9560_1d000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_FF8C1277964B9560_1d000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_1d000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)result <<= _n;

}

const char* const _0RL_cd_FF8C1277964B9560_1d000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::ManagementException::_PD_repoId,
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_1d000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::ManagementException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::ManagementException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_2d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_1d000000* tcd = (_0RL_cd_FF8C1277964B9560_1d000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getUser(*tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getUser(*tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->getUser(*tcd->arg_0, tcd->arg_1);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(org::cfn::scad::core::corba::security::ManagementException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

org::cfn::scad::core::corba::clients::User* org::cfn::scad::core::corba::server::_objref_CentralServer::getUser(const clients::User& administrator, const CORBA::WChar* username)
{
  _0RL_cd_FF8C1277964B9560_1d000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_2d000000, "getUser", 8);
  _call_desc.arg_0 = &(clients::User&) administrator;
  _call_desc.arg_1 = username;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_corg_mcfn_mscad_mcore_mcorba_mutil_mCharArray_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mManagementException_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_3d000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_3d000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  org::cfn::scad::core::corba::util::CharArray_var arg_1_;
  const org::cfn::scad::core::corba::util::CharArray* arg_1;
};

void _0RL_cd_FF8C1277964B9560_3d000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  (const org::cfn::scad::core::corba::util::CharArray&) *arg_1 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_3d000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new org::cfn::scad::core::corba::util::CharArray;
  (org::cfn::scad::core::corba::util::CharArray&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_3d000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::ManagementException::_PD_repoId,
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_3d000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::ManagementException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::ManagementException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_4d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_3d000000* tcd = (_0RL_cd_FF8C1277964B9560_3d000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->changePassword(*tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->changePassword(*tcd->arg_0, *tcd->arg_1);
  else {
    try {
      impl->changePassword(*tcd->arg_0, *tcd->arg_1);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(org::cfn::scad::core::corba::security::ManagementException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::changePassword(const clients::User& user, const util::CharArray& password)
{
  _0RL_cd_FF8C1277964B9560_3d000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_4d000000, "changePassword", 15);
  _call_desc.arg_0 = &(clients::User&) user;
  _call_desc.arg_1 = &(util::CharArray&) password;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_corg_mcfn_mscad_mcore_mcorba_mclients_mInstitution_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mManagementException_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_5d000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_5d000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  org::cfn::scad::core::corba::clients::Institution_var arg_1_;
  const org::cfn::scad::core::corba::clients::Institution* arg_1;
};

void _0RL_cd_FF8C1277964B9560_5d000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  (const org::cfn::scad::core::corba::clients::Institution&) *arg_1 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_5d000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new org::cfn::scad::core::corba::clients::Institution;
  (org::cfn::scad::core::corba::clients::Institution&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_5d000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::ManagementException::_PD_repoId,
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_5d000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::ManagementException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::ManagementException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_6d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_5d000000* tcd = (_0RL_cd_FF8C1277964B9560_5d000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->addInstitution(*tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->addInstitution(*tcd->arg_0, *tcd->arg_1);
  else {
    try {
      impl->addInstitution(*tcd->arg_0, *tcd->arg_1);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(org::cfn::scad::core::corba::security::ManagementException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::addInstitution(const clients::User& administrator, const clients::Institution& institute)
{
  _0RL_cd_FF8C1277964B9560_5d000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_6d000000, "addInstitution", 15);
  _call_desc.arg_0 = &(clients::User&) administrator;
  _call_desc.arg_1 = &(clients::Institution&) institute;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_7d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_7c000000* tcd = (_0RL_cd_FF8C1277964B9560_7c000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->removeInstitution(*tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->removeInstitution(*tcd->arg_0, tcd->arg_1);
  else {
    try {
      impl->removeInstitution(*tcd->arg_0, tcd->arg_1);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(org::cfn::scad::core::corba::security::ManagementException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::removeInstitution(const clients::User& administrator, const CORBA::WChar* name)
{
  _0RL_cd_FF8C1277964B9560_7c000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_7d000000, "removeInstitution", 18);
  _call_desc.arg_0 = &(clients::User&) administrator;
  _call_desc.arg_1 = name;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_8d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_5d000000* tcd = (_0RL_cd_FF8C1277964B9560_5d000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->editInstitution(*tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->editInstitution(*tcd->arg_0, *tcd->arg_1);
  else {
    try {
      impl->editInstitution(*tcd->arg_0, *tcd->arg_1);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(org::cfn::scad::core::corba::security::ManagementException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::editInstitution(const clients::User& administrator, const clients::Institution& institute)
{
  _0RL_cd_FF8C1277964B9560_5d000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_8d000000, "editInstitution", 16);
  _call_desc.arg_0 = &(clients::User&) administrator;
  _call_desc.arg_1 = &(clients::Institution&) institute;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_9d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_fc000000* tcd = (_0RL_cd_FF8C1277964B9560_fc000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getAllInstitutions();
#else
  if (!cd->is_upcall())
    tcd->result = impl->getAllInstitutions();
  else {
    try {
      tcd->result = impl->getAllInstitutions();
    }
    catch(org::cfn::scad::core::corba::security::ManagementException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

org::cfn::scad::core::corba::util::StringList* org::cfn::scad::core::corba::server::_objref_CentralServer::getAllInstitutions()
{
  _0RL_cd_FF8C1277964B9560_fc000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_9d000000, "getAllInstitutions", 19);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mclients_mInstitution_i_cwstring_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mManagementException
class _0RL_cd_FF8C1277964B9560_ad000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_ad000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  org::cfn::scad::core::corba::clients::Institution_var result;
};

void _0RL_cd_FF8C1277964B9560_ad000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);

}

void _0RL_cd_FF8C1277964B9560_ad000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_FF8C1277964B9560_ad000000::marshalReturnedValues(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::Institution&) result >>= _n;

}

void _0RL_cd_FF8C1277964B9560_ad000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new org::cfn::scad::core::corba::clients::Institution;
  (org::cfn::scad::core::corba::clients::Institution&)result <<= _n;

}

const char* const _0RL_cd_FF8C1277964B9560_ad000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::ManagementException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_ad000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::ManagementException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::ManagementException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_bd000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_ad000000* tcd = (_0RL_cd_FF8C1277964B9560_ad000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getInstitution(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getInstitution(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getInstitution(tcd->arg_0);
    }
    catch(org::cfn::scad::core::corba::security::ManagementException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

org::cfn::scad::core::corba::clients::Institution* org::cfn::scad::core::corba::server::_objref_CentralServer::getInstitution(const CORBA::WChar* name)
{
  _0RL_cd_FF8C1277964B9560_ad000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_bd000000, "getInstitution", 15);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_cd000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_b1000000* tcd = (_0RL_cd_FF8C1277964B9560_b1000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getGroupsXML();


}

CORBA::WChar* org::cfn::scad::core::corba::server::_objref_CentralServer::getGroupsXML()
{
  _0RL_cd_FF8C1277964B9560_b1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_cd000000, "getGroupsXML", 13);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_cwstring_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_dd000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_dd000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  CORBA::WString_var arg_1_;
  const CORBA::WChar* arg_1;
};

void _0RL_cd_FF8C1277964B9560_dd000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  _n.marshalWString(arg_1,0);

}

void _0RL_cd_FF8C1277964B9560_dd000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_dd000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_dd000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_ed000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_dd000000* tcd = (_0RL_cd_FF8C1277964B9560_dd000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->updateGroupsXML(*tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->updateGroupsXML(*tcd->arg_0, tcd->arg_1);
  else {
    try {
      impl->updateGroupsXML(*tcd->arg_0, tcd->arg_1);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::updateGroupsXML(const clients::User& administrator, const CORBA::WChar* xml)
{
  _0RL_cd_FF8C1277964B9560_dd000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ed000000, "updateGroupsXML", 16);
  _call_desc.arg_0 = &(clients::User&) administrator;
  _call_desc.arg_1 = xml;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_fd000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_21000000* tcd = (_0RL_cd_FF8C1277964B9560_21000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getComments(*tcd->arg_0, *tcd->arg_1);


}

org::cfn::scad::core::corba::util::CommentList* org::cfn::scad::core::corba::server::_objref_CentralServer::getComments(const util::TimeStamp& from, const util::TimeStamp& to)
{
  _0RL_cd_FF8C1277964B9560_21000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_fd000000, "getComments", 12);
  _call_desc.arg_0 = &(util::TimeStamp&) from;
  _call_desc.arg_1 = &(util::TimeStamp&) to;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_0e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_41000000* tcd = (_0RL_cd_FF8C1277964B9560_41000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  tcd->result = impl->getLastComments(tcd->arg_0);


}

org::cfn::scad::core::corba::util::CommentList* org::cfn::scad::core::corba::server::_objref_CentralServer::getLastComments(CORBA::Short number)
{
  _0RL_cd_FF8C1277964B9560_41000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_0e000000, "getLastComments", 16);
  _call_desc.arg_0 = number;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mutil_mComment_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_1e000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_1e000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::util::Comment_var arg_0_;
  const org::cfn::scad::core::corba::util::Comment* arg_0;
};

void _0RL_cd_FF8C1277964B9560_1e000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::util::Comment&) *arg_0 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_1e000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::util::Comment;
  (org::cfn::scad::core::corba::util::Comment&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_1e000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_1e000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_2e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_1e000000* tcd = (_0RL_cd_FF8C1277964B9560_1e000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->addComment(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->addComment(*tcd->arg_0);
  else {
    try {
      impl->addComment(*tcd->arg_0);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::addComment(const util::Comment& newComment)
{
  _0RL_cd_FF8C1277964B9560_1e000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_2e000000, "addComment", 11);
  _call_desc.arg_0 = &(util::Comment&) newComment;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mutil_mComment_i_corg_mcfn_mscad_mcore_mcorba_mutil_mComment_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_3e000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_3e000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::util::Comment_var arg_0_;
  const org::cfn::scad::core::corba::util::Comment* arg_0;
  org::cfn::scad::core::corba::util::Comment_var arg_1_;
  const org::cfn::scad::core::corba::util::Comment* arg_1;
};

void _0RL_cd_FF8C1277964B9560_3e000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::util::Comment&) *arg_0 >>= _n;
  (const org::cfn::scad::core::corba::util::Comment&) *arg_1 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_3e000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::util::Comment;
  (org::cfn::scad::core::corba::util::Comment&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new org::cfn::scad::core::corba::util::Comment;
  (org::cfn::scad::core::corba::util::Comment&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_3e000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_3e000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_4e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_3e000000* tcd = (_0RL_cd_FF8C1277964B9560_3e000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->editComment(*tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->editComment(*tcd->arg_0, *tcd->arg_1);
  else {
    try {
      impl->editComment(*tcd->arg_0, *tcd->arg_1);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::editComment(const util::Comment& toEdit, const util::Comment& toReplace)
{
  _0RL_cd_FF8C1277964B9560_3e000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_4e000000, "editComment", 12);
  _call_desc.arg_0 = &(util::Comment&) toEdit;
  _call_desc.arg_1 = &(util::Comment&) toReplace;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_5e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_1e000000* tcd = (_0RL_cd_FF8C1277964B9560_1e000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->removeComment(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->removeComment(*tcd->arg_0);
  else {
    try {
      impl->removeComment(*tcd->arg_0);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::removeComment(const util::Comment& toRemove)
{
  _0RL_cd_FF8C1277964B9560_1e000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_5e000000, "removeComment", 14);
  _call_desc.arg_0 = &(util::Comment&) toRemove;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_6e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_61000000* tcd = (_0RL_cd_FF8C1277964B9560_61000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  impl->commentAdded(*tcd->arg_0);


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::commentAdded(const util::Comment& newComment)
{
  _0RL_cd_FF8C1277964B9560_61000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_6e000000, "commentAdded", 13);
  _call_desc.arg_0 = &(util::Comment&) newComment;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_7e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_81000000* tcd = (_0RL_cd_FF8C1277964B9560_81000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  impl->commentEdited(*tcd->arg_0, *tcd->arg_1);


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::commentEdited(const util::Comment& toEdit, const util::Comment& toReplace)
{
  _0RL_cd_FF8C1277964B9560_81000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_7e000000, "commentEdited", 14);
  _call_desc.arg_0 = &(util::Comment&) toEdit;
  _call_desc.arg_1 = &(util::Comment&) toReplace;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_8e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_61000000* tcd = (_0RL_cd_FF8C1277964B9560_61000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServer* impl = (org::cfn::scad::core::corba::server::_impl_CentralServer*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServer::_PD_repoId);
  impl->commentRemoved(*tcd->arg_0);


}

void org::cfn::scad::core::corba::server::_objref_CentralServer::commentRemoved(const util::Comment& toRemove)
{
  _0RL_cd_FF8C1277964B9560_61000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_8e000000, "commentRemoved", 15);
  _call_desc.arg_0 = &(util::Comment&) toRemove;

  _invoke(_call_desc);



}
org::cfn::scad::core::corba::server::_pof_CentralServer::~_pof_CentralServer() {}


omniObjRef*
org::cfn::scad::core::corba::server::_pof_CentralServer::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::org::cfn::scad::core::corba::server::_objref_CentralServer(ior, id);
}


CORBA::Boolean
org::cfn::scad::core::corba::server::_pof_CentralServer::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::org::cfn::scad::core::corba::server::CentralServer::_PD_repoId) )
    return 1;

  return 0;
}

const org::cfn::scad::core::corba::server::_pof_CentralServer _the_pof_org_mcfn_mscad_mcore_mcorba_mserver_mCentralServer;

org::cfn::scad::core::corba::server::_impl_CentralServer::~_impl_CentralServer() {}


CORBA::Boolean
org::cfn::scad::core::corba::server::_impl_CentralServer::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "getHardwareLockStatus") ) {

    _0RL_cd_FF8C1277964B9560_b6000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_c6000000, "getHardwareLockStatus", 22, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getNodes") ) {

    _0RL_cd_FF8C1277964B9560_d1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_d6000000, "getNodes", 9, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getHardwareInfos") ) {

    _0RL_cd_FF8C1277964B9560_e6000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_f6000000, "getHardwareInfos", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "requireLock") ) {

    _0RL_cd_FF8C1277964B9560_07000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_17000000, "requireLock", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "changeHardwareStatus") ) {

    _0RL_cd_FF8C1277964B9560_27000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_37000000, "changeHardwareStatus", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "changeAllHardwareStatus") ) {

    _0RL_cd_FF8C1277964B9560_47000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_57000000, "changeAllHardwareStatus", 24, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getParameterValue") ) {

    _0RL_cd_FF8C1277964B9560_67000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_77000000, "getParameterValue", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getParameterValues") ) {

    _0RL_cd_FF8C1277964B9560_87000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_97000000, "getParameterValues", 19, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getExtraLibs") ) {

    _0RL_cd_FF8C1277964B9560_a7000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_b7000000, "getExtraLibs", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "configure") ) {

    _0RL_cd_FF8C1277964B9560_c7000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_d7000000, "configure", 10, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getNodeConnectionStatus") ) {

    _0RL_cd_FF8C1277964B9560_f2000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_e7000000, "getNodeConnectionStatus", 24, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "changeNodeConnectionStatus") ) {

    _0RL_cd_FF8C1277964B9560_f7000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_08000000, "changeNodeConnectionStatus", 27, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAllHardwareConnectionStatus") ) {

    _0RL_cd_FF8C1277964B9560_53000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_18000000, "getAllHardwareConnectionStatus", 31, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getHardwareConnectionStatus") ) {

    _0RL_cd_FF8C1277964B9560_73000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_28000000, "getHardwareConnectionStatus", 28, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "changeHardwareConnectionStatus") ) {

    _0RL_cd_FF8C1277964B9560_38000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_48000000, "changeHardwareConnectionStatus", 31, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAllParametersConnectionStatus") ) {

    _0RL_cd_FF8C1277964B9560_58000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_68000000, "getAllParametersConnectionStatus", 33, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getParameterConnectionStatus") ) {

    _0RL_cd_FF8C1277964B9560_78000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_88000000, "getParameterConnectionStatus", 29, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "changeParameterConnectionStatus") ) {

    _0RL_cd_FF8C1277964B9560_98000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_a8000000, "changeParameterConnectionStatus", 32, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getTransferFunction") ) {

    _0RL_cd_FF8C1277964B9560_b8000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_c8000000, "getTransferFunction", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setTransferFunction") ) {

    _0RL_cd_FF8C1277964B9560_d8000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_e8000000, "setTransferFunction", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "connectionStatusChanged") ) {

    _0RL_cd_FF8C1277964B9560_20000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_f8000000, "connectionStatusChanged", 24, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "isUserAllowed") ) {

    _0RL_cd_FF8C1277964B9560_09000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_19000000, "isUserAllowed", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getConnectedUsers") ) {

    _0RL_cd_FF8C1277964B9560_29000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_39000000, "getConnectedUsers", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "lock") ) {

    _0RL_cd_FF8C1277964B9560_49000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_59000000, "lock", 5, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "unlock") ) {

    _0RL_cd_FF8C1277964B9560_49000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_69000000, "unlock", 7, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "eventEditLock") ) {

    _0RL_cd_FF8C1277964B9560_79000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_89000000, "eventEditLock", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "eventEditUnLock") ) {

    _0RL_cd_FF8C1277964B9560_79000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_99000000, "eventEditUnLock", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "hardwareListChanged") ) {

    _0RL_cd_FF8C1277964B9560_72000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_a9000000, "hardwareListChanged", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "isEventEditLocked") ) {

    _0RL_cd_FF8C1277964B9560_b9000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_c9000000, "isEventEditLocked", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getXMLEvents") ) {

    _0RL_cd_FF8C1277964B9560_b1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_d9000000, "getXMLEvents", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getLastEventTable") ) {

    _0RL_cd_FF8C1277964B9560_e9000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_f9000000, "getLastEventTable", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setEventTable") ) {

    _0RL_cd_FF8C1277964B9560_0a000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_1a000000, "setEventTable", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "fireEventTable") ) {

    _0RL_cd_FF8C1277964B9560_2a000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_3a000000, "fireEventTable", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "newEventListAdded") ) {

    _0RL_cd_FF8C1277964B9560_a0000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_4a000000, "newEventListAdded", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "abort") ) {

    _0RL_cd_FF8C1277964B9560_79000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_5a000000, "abort", 6, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "hardwareStatusChange") ) {

    _0RL_cd_FF8C1277964B9560_a5000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_6a000000, "hardwareStatusChange", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "nodeStatusChange") ) {

    _0RL_cd_FF8C1277964B9560_c5000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_7a000000, "nodeStatusChange", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getNodeStatus") ) {

    _0RL_cd_FF8C1277964B9560_8a000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_9a000000, "getNodeStatus", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAllHardwareStatus") ) {

    _0RL_cd_FF8C1277964B9560_aa000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ba000000, "getAllHardwareStatus", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getCurrentTime") ) {

    _0RL_cd_FF8C1277964B9560_ca000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_da000000, "getCurrentTime", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "newDataAvailable") ) {

    _0RL_cd_FF8C1277964B9560_00000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ea000000, "newDataAvailable", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "newDataStored") ) {

    _0RL_cd_FF8C1277964B9560_a4000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_fa000000, "newDataStored", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getData") ) {

    _0RL_cd_FF8C1277964B9560_60000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_0b000000, "getData", 8, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getDataFromTime") ) {

    _0RL_cd_FF8C1277964B9560_80000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_1b000000, "getDataFromTime", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPluginsXML") ) {

    _0RL_cd_FF8C1277964B9560_b1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_2b000000, "getPluginsXML", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAllPublicProfiles") ) {

    _0RL_cd_FF8C1277964B9560_3b000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_4b000000, "getAllPublicProfiles", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAllUserProfiles") ) {

    _0RL_cd_FF8C1277964B9560_5b000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_6b000000, "getAllUserProfiles", 19, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "saveProfile") ) {

    _0RL_cd_FF8C1277964B9560_7b000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_8b000000, "saveProfile", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "deleteProfile") ) {

    _0RL_cd_FF8C1277964B9560_7b000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_9b000000, "deleteProfile", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "userPropertyChanged") ) {

    _0RL_cd_FF8C1277964B9560_16000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ab000000, "userPropertyChanged", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "shareData") ) {

    _0RL_cd_FF8C1277964B9560_bb000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_cb000000, "shareData", 10, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "kickUser") ) {

    _0RL_cd_FF8C1277964B9560_db000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_eb000000, "kickUser", 9, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "ping") ) {

    _0RL_cd_FF8C1277964B9560_f1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_fb000000, "ping", 5, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getNodesNames") ) {

    _0RL_cd_FF8C1277964B9560_c0000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_0c000000, "getNodesNames", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getHardwareAndParameterNames") ) {

    _0RL_cd_FF8C1277964B9560_e0000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_1c000000, "getHardwareAndParameterNames", 29, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "changeName") ) {

    _0RL_cd_FF8C1277964B9560_2c000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_3c000000, "changeName", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "nameChanged") ) {

    _0RL_cd_FF8C1277964B9560_01000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_4c000000, "nameChanged", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "addUser") ) {

    _0RL_cd_FF8C1277964B9560_5c000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_6c000000, "addUser", 8, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "removeUser") ) {

    _0RL_cd_FF8C1277964B9560_7c000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_8c000000, "removeUser", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "editUser") ) {

    _0RL_cd_FF8C1277964B9560_9c000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ac000000, "editUser", 9, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "editUserInformations") ) {

    _0RL_cd_FF8C1277964B9560_bc000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_cc000000, "editUserInformations", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getUserInformations") ) {

    _0RL_cd_FF8C1277964B9560_dc000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ec000000, "getUserInformations", 20, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAllUsers") ) {

    _0RL_cd_FF8C1277964B9560_fc000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_0d000000, "getAllUsers", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getUser") ) {

    _0RL_cd_FF8C1277964B9560_1d000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_2d000000, "getUser", 8, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "changePassword") ) {

    _0RL_cd_FF8C1277964B9560_3d000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_4d000000, "changePassword", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "addInstitution") ) {

    _0RL_cd_FF8C1277964B9560_5d000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_6d000000, "addInstitution", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "removeInstitution") ) {

    _0RL_cd_FF8C1277964B9560_7c000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_7d000000, "removeInstitution", 18, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "editInstitution") ) {

    _0RL_cd_FF8C1277964B9560_5d000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_8d000000, "editInstitution", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAllInstitutions") ) {

    _0RL_cd_FF8C1277964B9560_fc000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_9d000000, "getAllInstitutions", 19, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getInstitution") ) {

    _0RL_cd_FF8C1277964B9560_ad000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_bd000000, "getInstitution", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getGroupsXML") ) {

    _0RL_cd_FF8C1277964B9560_b1000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_cd000000, "getGroupsXML", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "updateGroupsXML") ) {

    _0RL_cd_FF8C1277964B9560_dd000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ed000000, "updateGroupsXML", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getComments") ) {

    _0RL_cd_FF8C1277964B9560_21000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_fd000000, "getComments", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getLastComments") ) {

    _0RL_cd_FF8C1277964B9560_41000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_0e000000, "getLastComments", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "addComment") ) {

    _0RL_cd_FF8C1277964B9560_1e000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_2e000000, "addComment", 11, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "editComment") ) {

    _0RL_cd_FF8C1277964B9560_3e000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_4e000000, "editComment", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "removeComment") ) {

    _0RL_cd_FF8C1277964B9560_1e000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_5e000000, "removeComment", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "commentAdded") ) {

    _0RL_cd_FF8C1277964B9560_61000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_6e000000, "commentAdded", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "commentEdited") ) {

    _0RL_cd_FF8C1277964B9560_81000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_7e000000, "commentEdited", 14, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "commentRemoved") ) {

    _0RL_cd_FF8C1277964B9560_61000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_8e000000, "commentRemoved", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
org::cfn::scad::core::corba::server::_impl_CentralServer::_ptrToInterface(const char* id)
{
  if( id == ::org::cfn::scad::core::corba::server::CentralServer::_PD_repoId )
    return (::org::cfn::scad::core::corba::server::_impl_CentralServer*) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::org::cfn::scad::core::corba::server::CentralServer::_PD_repoId) )
    return (::org::cfn::scad::core::corba::server::_impl_CentralServer*) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
org::cfn::scad::core::corba::server::_impl_CentralServer::_mostDerivedRepoId()
{
  return ::org::cfn::scad::core::corba::server::CentralServer::_PD_repoId;
}

org::cfn::scad::core::corba::server::CentralServerRegister_ptr org::cfn::scad::core::corba::server::CentralServerRegister_Helper::_nil() {
  return ::org::cfn::scad::core::corba::server::CentralServerRegister::_nil();
}

CORBA::Boolean org::cfn::scad::core::corba::server::CentralServerRegister_Helper::is_nil(::org::cfn::scad::core::corba::server::CentralServerRegister_ptr p) {
  return CORBA::is_nil(p);

}

void org::cfn::scad::core::corba::server::CentralServerRegister_Helper::release(::org::cfn::scad::core::corba::server::CentralServerRegister_ptr p) {
  CORBA::release(p);
}

void org::cfn::scad::core::corba::server::CentralServerRegister_Helper::marshalObjRef(::org::cfn::scad::core::corba::server::CentralServerRegister_ptr obj, cdrStream& s) {
  ::org::cfn::scad::core::corba::server::CentralServerRegister::_marshalObjRef(obj, s);
}

org::cfn::scad::core::corba::server::CentralServerRegister_ptr org::cfn::scad::core::corba::server::CentralServerRegister_Helper::unmarshalObjRef(cdrStream& s) {
  return ::org::cfn::scad::core::corba::server::CentralServerRegister::_unmarshalObjRef(s);
}

void org::cfn::scad::core::corba::server::CentralServerRegister_Helper::duplicate(::org::cfn::scad::core::corba::server::CentralServerRegister_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

org::cfn::scad::core::corba::server::CentralServerRegister_ptr
org::cfn::scad::core::corba::server::CentralServerRegister::_duplicate(::org::cfn::scad::core::corba::server::CentralServerRegister_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

org::cfn::scad::core::corba::server::CentralServerRegister_ptr
org::cfn::scad::core::corba::server::CentralServerRegister::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


org::cfn::scad::core::corba::server::CentralServerRegister_ptr
org::cfn::scad::core::corba::server::CentralServerRegister::_unchecked_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

org::cfn::scad::core::corba::server::CentralServerRegister_ptr
org::cfn::scad::core::corba::server::CentralServerRegister::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_CentralServerRegister _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_CentralServerRegister* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_CentralServerRegister;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* org::cfn::scad::core::corba::server::CentralServerRegister::_PD_repoId = "IDL:org/cfn/scad/core/corba/server/CentralServerRegister:1.0";


org::cfn::scad::core::corba::server::_objref_CentralServerRegister::~_objref_CentralServerRegister() {

}


org::cfn::scad::core::corba::server::_objref_CentralServerRegister::_objref_CentralServerRegister(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::org::cfn::scad::core::corba::server::CentralServerRegister::_PD_repoId, ior, id, 1)


{
  _PR_setobj(this);
}

void*
org::cfn::scad::core::corba::server::_objref_CentralServerRegister::_ptrToObjRef(const char* id)
{
  if( id == ::org::cfn::scad::core::corba::server::CentralServerRegister::_PD_repoId )
    return (::org::cfn::scad::core::corba::server::CentralServerRegister_ptr) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::org::cfn::scad::core::corba::server::CentralServerRegister::_PD_repoId) )
    return (::org::cfn::scad::core::corba::server::CentralServerRegister_ptr) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mserver_mCentralServer_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mNode_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_9e000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_9e000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  org::cfn::scad::core::corba::hardware::Node_var arg_1_;
  org::cfn::scad::core::corba::hardware::Node_ptr arg_1;
  org::cfn::scad::core::corba::server::CentralServer_var result;
};

void _0RL_cd_FF8C1277964B9560_9e000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  org::cfn::scad::core::corba::hardware::Node::_marshalObjRef(arg_1,_n);

}

void _0RL_cd_FF8C1277964B9560_9e000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = org::cfn::scad::core::corba::hardware::Node::_unmarshalObjRef(_n);
  arg_1 = arg_1_.in();

}

void _0RL_cd_FF8C1277964B9560_9e000000::marshalReturnedValues(cdrStream& _n)
{
  org::cfn::scad::core::corba::server::CentralServer::_marshalObjRef(result,_n);

}

void _0RL_cd_FF8C1277964B9560_9e000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = org::cfn::scad::core::corba::server::CentralServer::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_FF8C1277964B9560_9e000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_9e000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_ae000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_9e000000* tcd = (_0RL_cd_FF8C1277964B9560_9e000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServerRegister* impl = (org::cfn::scad::core::corba::server::_impl_CentralServerRegister*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServerRegister::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->registerNode(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->registerNode(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->registerNode(tcd->arg_0, tcd->arg_1);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

org::cfn::scad::core::corba::server::CentralServer_ptr org::cfn::scad::core::corba::server::_objref_CentralServerRegister::registerNode(const CORBA::WChar* publicKey, hardware::Node_ptr node)
{
  _0RL_cd_FF8C1277964B9560_9e000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ae000000, "registerNode", 13);
  _call_desc.arg_0 = publicKey;
  _call_desc.arg_1 = node;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mserver_mCentralServer_i_corg_mcfn_mscad_mcore_mcorba_mclients_mClient_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_be000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_be000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::Client_var arg_0_;
  org::cfn::scad::core::corba::clients::Client_ptr arg_0;
  org::cfn::scad::core::corba::server::CentralServer_var result;
};

void _0RL_cd_FF8C1277964B9560_be000000::marshalArguments(cdrStream& _n)
{
  org::cfn::scad::core::corba::clients::Client::_marshalObjRef(arg_0,_n);

}

void _0RL_cd_FF8C1277964B9560_be000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = org::cfn::scad::core::corba::clients::Client::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

void _0RL_cd_FF8C1277964B9560_be000000::marshalReturnedValues(cdrStream& _n)
{
  org::cfn::scad::core::corba::server::CentralServer::_marshalObjRef(result,_n);

}

void _0RL_cd_FF8C1277964B9560_be000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = org::cfn::scad::core::corba::server::CentralServer::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_FF8C1277964B9560_be000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_be000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_ce000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_be000000* tcd = (_0RL_cd_FF8C1277964B9560_be000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServerRegister* impl = (org::cfn::scad::core::corba::server::_impl_CentralServerRegister*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServerRegister::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->registerClient(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->registerClient(tcd->arg_0);
  else {
    try {
      tcd->result = impl->registerClient(tcd->arg_0);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

org::cfn::scad::core::corba::server::CentralServer_ptr org::cfn::scad::core::corba::server::_objref_CentralServerRegister::registerClient(clients::Client_ptr c)
{
  _0RL_cd_FF8C1277964B9560_be000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ce000000, "registerClient", 15);
  _call_desc.arg_0 = c;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mhardware_mNode_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_de000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_de000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::hardware::Node_var arg_0_;
  org::cfn::scad::core::corba::hardware::Node_ptr arg_0;
};

void _0RL_cd_FF8C1277964B9560_de000000::marshalArguments(cdrStream& _n)
{
  org::cfn::scad::core::corba::hardware::Node::_marshalObjRef(arg_0,_n);

}

void _0RL_cd_FF8C1277964B9560_de000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = org::cfn::scad::core::corba::hardware::Node::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_de000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_de000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_ee000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_de000000* tcd = (_0RL_cd_FF8C1277964B9560_de000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServerRegister* impl = (org::cfn::scad::core::corba::server::_impl_CentralServerRegister*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServerRegister::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->unregisterNode(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->unregisterNode(tcd->arg_0);
  else {
    try {
      impl->unregisterNode(tcd->arg_0);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServerRegister::unregisterNode(hardware::Node_ptr node)
{
  _0RL_cd_FF8C1277964B9560_de000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ee000000, "unregisterNode", 15);
  _call_desc.arg_0 = node;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mClient_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_fe000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_fe000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);


  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  org::cfn::scad::core::corba::clients::Client_var arg_0_;
  org::cfn::scad::core::corba::clients::Client_ptr arg_0;
};

void _0RL_cd_FF8C1277964B9560_fe000000::marshalArguments(cdrStream& _n)
{
  org::cfn::scad::core::corba::clients::Client::_marshalObjRef(arg_0,_n);

}

void _0RL_cd_FF8C1277964B9560_fe000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = org::cfn::scad::core::corba::clients::Client::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_FF8C1277964B9560_fe000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_fe000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_0f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_fe000000* tcd = (_0RL_cd_FF8C1277964B9560_fe000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServerRegister* impl = (org::cfn::scad::core::corba::server::_impl_CentralServerRegister*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServerRegister::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->unregisterClient(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->unregisterClient(tcd->arg_0);
  else {
    try {
      impl->unregisterClient(tcd->arg_0);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void org::cfn::scad::core::corba::server::_objref_CentralServerRegister::unregisterClient(clients::Client_ptr c)
{
  _0RL_cd_FF8C1277964B9560_fe000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_0f000000, "unregisterClient", 17);
  _call_desc.arg_0 = c;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _corg_mcfn_mscad_mcore_mcorba_mserver_mCentralServer_i_cwstring_i_corg_mcfn_mscad_mcore_mcorba_mdb_mDatabase_e_corg_mcfn_mscad_mcore_mcorba_msecurity_mSecurityException
class _0RL_cd_FF8C1277964B9560_1f000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_1f000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);

  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CORBA::WString_var arg_0_;
  const CORBA::WChar* arg_0;
  org::cfn::scad::core::corba::db::Database_var arg_1_;
  org::cfn::scad::core::corba::db::Database_ptr arg_1;
  org::cfn::scad::core::corba::server::CentralServer_var result;
};

void _0RL_cd_FF8C1277964B9560_1f000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  org::cfn::scad::core::corba::db::Database::_marshalObjRef(arg_1,_n);

}

void _0RL_cd_FF8C1277964B9560_1f000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = org::cfn::scad::core::corba::db::Database::_unmarshalObjRef(_n);
  arg_1 = arg_1_.in();

}

void _0RL_cd_FF8C1277964B9560_1f000000::marshalReturnedValues(cdrStream& _n)
{
  org::cfn::scad::core::corba::server::CentralServer::_marshalObjRef(result,_n);

}

void _0RL_cd_FF8C1277964B9560_1f000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = org::cfn::scad::core::corba::server::CentralServer::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_FF8C1277964B9560_1f000000::_user_exns[] = {
  org::cfn::scad::core::corba::security::SecurityException::_PD_repoId
};

void _0RL_cd_FF8C1277964B9560_1f000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, org::cfn::scad::core::corba::security::SecurityException::_PD_repoId) ) {
    org::cfn::scad::core::corba::security::SecurityException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_2f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_1f000000* tcd = (_0RL_cd_FF8C1277964B9560_1f000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServerRegister* impl = (org::cfn::scad::core::corba::server::_impl_CentralServerRegister*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServerRegister::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->registerDBController(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->registerDBController(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->registerDBController(tcd->arg_0, tcd->arg_1);
    }
    catch(org::cfn::scad::core::corba::security::SecurityException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

org::cfn::scad::core::corba::server::CentralServer_ptr org::cfn::scad::core::corba::server::_objref_CentralServerRegister::registerDBController(const CORBA::WChar* publicKey, db::Database_ptr db)
{
  _0RL_cd_FF8C1277964B9560_1f000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_2f000000, "registerDBController", 21);
  _call_desc.arg_0 = publicKey;
  _call_desc.arg_1 = db;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUser_i_corg_mcfn_mscad_mcore_mcorba_mclients_mUserInformations
class _0RL_cd_FF8C1277964B9560_3f000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_FF8C1277964B9560_3f000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  org::cfn::scad::core::corba::clients::User_var arg_0_;
  const org::cfn::scad::core::corba::clients::User* arg_0;
  org::cfn::scad::core::corba::clients::UserInformations_var arg_1_;
  const org::cfn::scad::core::corba::clients::UserInformations* arg_1;
};

void _0RL_cd_FF8C1277964B9560_3f000000::marshalArguments(cdrStream& _n)
{
  (const org::cfn::scad::core::corba::clients::User&) *arg_0 >>= _n;
  (const org::cfn::scad::core::corba::clients::UserInformations&) *arg_1 >>= _n;

}

void _0RL_cd_FF8C1277964B9560_3f000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new org::cfn::scad::core::corba::clients::User;
  (org::cfn::scad::core::corba::clients::User&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new org::cfn::scad::core::corba::clients::UserInformations;
  (org::cfn::scad::core::corba::clients::UserInformations&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_FF8C1277964B9560_4f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_FF8C1277964B9560_3f000000* tcd = (_0RL_cd_FF8C1277964B9560_3f000000*)cd;
  org::cfn::scad::core::corba::server::_impl_CentralServerRegister* impl = (org::cfn::scad::core::corba::server::_impl_CentralServerRegister*) svnt->_ptrToInterface(org::cfn::scad::core::corba::server::CentralServerRegister::_PD_repoId);
  impl->requireRegister(*tcd->arg_0, *tcd->arg_1);


}

void org::cfn::scad::core::corba::server::_objref_CentralServerRegister::requireRegister(const clients::User& usr, const clients::UserInformations& usrInfo)
{
  _0RL_cd_FF8C1277964B9560_3f000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_4f000000, "requireRegister", 16);
  _call_desc.arg_0 = &(clients::User&) usr;
  _call_desc.arg_1 = &(clients::UserInformations&) usrInfo;

  _invoke(_call_desc);



}
org::cfn::scad::core::corba::server::_pof_CentralServerRegister::~_pof_CentralServerRegister() {}


omniObjRef*
org::cfn::scad::core::corba::server::_pof_CentralServerRegister::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::org::cfn::scad::core::corba::server::_objref_CentralServerRegister(ior, id);
}


CORBA::Boolean
org::cfn::scad::core::corba::server::_pof_CentralServerRegister::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::org::cfn::scad::core::corba::server::CentralServerRegister::_PD_repoId) )
    return 1;

  return 0;
}

const org::cfn::scad::core::corba::server::_pof_CentralServerRegister _the_pof_org_mcfn_mscad_mcore_mcorba_mserver_mCentralServerRegister;

org::cfn::scad::core::corba::server::_impl_CentralServerRegister::~_impl_CentralServerRegister() {}


CORBA::Boolean
org::cfn::scad::core::corba::server::_impl_CentralServerRegister::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "registerNode") ) {

    _0RL_cd_FF8C1277964B9560_9e000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ae000000, "registerNode", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "registerClient") ) {

    _0RL_cd_FF8C1277964B9560_be000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ce000000, "registerClient", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "unregisterNode") ) {

    _0RL_cd_FF8C1277964B9560_de000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_ee000000, "unregisterNode", 15, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "unregisterClient") ) {

    _0RL_cd_FF8C1277964B9560_fe000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_0f000000, "unregisterClient", 17, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "registerDBController") ) {

    _0RL_cd_FF8C1277964B9560_1f000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_2f000000, "registerDBController", 21, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "requireRegister") ) {

    _0RL_cd_FF8C1277964B9560_3f000000 _call_desc(_0RL_lcfn_FF8C1277964B9560_4f000000, "requireRegister", 16, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
org::cfn::scad::core::corba::server::_impl_CentralServerRegister::_ptrToInterface(const char* id)
{
  if( id == ::org::cfn::scad::core::corba::server::CentralServerRegister::_PD_repoId )
    return (::org::cfn::scad::core::corba::server::_impl_CentralServerRegister*) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::org::cfn::scad::core::corba::server::CentralServerRegister::_PD_repoId) )
    return (::org::cfn::scad::core::corba::server::_impl_CentralServerRegister*) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
org::cfn::scad::core::corba::server::_impl_CentralServerRegister::_mostDerivedRepoId()
{
  return ::org::cfn::scad::core::corba::server::CentralServerRegister::_PD_repoId;
}

POA_org::cfn::scad::core::corba::db::Database::~Database() {}

POA_org::cfn::scad::core::corba::hardware::Node::~Node() {}

POA_org::cfn::scad::core::corba::clients::Client::~Client() {}

POA_org::cfn::scad::core::corba::server::CentralServer::~CentralServer() {}

POA_org::cfn::scad::core::corba::server::CentralServerRegister::~CentralServerRegister() {}

